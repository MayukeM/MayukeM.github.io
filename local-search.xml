<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>各种学习网站汇总</title>
    <link href="/2022/01/28/%E7%AC%94%E8%AE%B0/%E5%90%84%E7%A7%8D%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80%E6%B1%87%E6%80%BB/"/>
    <url>/2022/01/28/%E7%AC%94%E8%AE%B0/%E5%90%84%E7%A7%8D%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="非常有用的网站（各种学习网站）"><a href="#非常有用的网站（各种学习网站）" class="headerlink" title="非常有用的网站（各种学习网站）"></a>非常有用的网站（各种学习网站）</h1><h2 id="几个神仙小众网站"><a href="#几个神仙小众网站" class="headerlink" title="几个神仙小众网站"></a>几个神仙小众网站</h2><p>人人自学网 最全的免费教程网站<a href="http://www.rrzxw.net/">http://www.rrzxw.net/</a></p><p>正版中国 正版软件限时免费<a href="https://getitfree.cn/">https://getitfree.cn/</a> </p><p>Mikutap解压娱乐二次元网站 <a href="https://aidn.jp/mikutap/">https://aidn.jp/mikutap/</a> </p><p>arkie根据文字内容自动生成海报<a href="https://www.arkie.cn/welcome">https://www.arkie.cn/welcome</a> </p><span id="more"></span><p>PPT模板<a href="http://www.hippter.com/">http://www.hippter.com/</a> </p><p>吾道幻灯片 PPT模板<a href="https://www.99ppt.com/S.html">https://www.99ppt.com/S.html</a></p><p>各种diy <a href="https://www.ehow.com/">https://www.ehow.com/</a> </p><p>鸠摩搜索 电子书搜索下载网站<a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a> </p><p>电子书下载网站<a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a> </p><p>大学生资源网<a href="http://www.dxzy163.com/">http://www.dxzy163.com/</a></p><p>word联盟<a href="http://wordlm.com/">http://wordlm.com/</a></p><p>视频编辑学习<a href="https://www.doyoudo.com/">https://www.doyoudo.com/</a></p><p>百度文库下载 <a href="file:///C:\Users\13740\Downloads\yaersen.com">yaersen.com</a></p><p>考试酷 <a href="https://examcoo.com/">https://examcoo.com/</a></p><p>在线好工具 nicetool.net 好像不能访问了</p><p>渣男说话的艺术<a href="https://lovelive.tools/">https://lovelive.tools/</a></p><p>logo图库<a href="https://www.60logo.com/list">https://www.60logo.com/list</a></p><p>音乐<a href="https://icons8.com/music">https://icons8.com/music</a></p><p>天空之城摄影<a href="https://www.skypixel.com/">https://www.skypixel.com/</a></p><p>抠图<a href="https://www.remove.bg/zh">https://www.remove.bg/zh</a></p><p>声音生成字幕等<a href="https://jianwai.youdao.com/">https://jianwai.youdao.com/</a></p><p>免费在线格式转换工具<a href="http://www.alltoall.net/">http://www.alltoall.net/</a></p><p>平面设计图片设计做图达人<a href="https://www.canva.cn/">https://www.canva.cn/</a></p><p>智能转写翻译服务<a href="http://sight.youdao.com/">http://sight.youdao.com/</a></p><p>巧匠课堂一个可以学设计的网站 <a href="https://www.2qj.com/">https://www.2qj.com/</a></p><p>小语种论坛 声同 <a href="http://www.somdom.com/">http://www.somdom.com/</a></p><h2 id="学习资源网站"><a href="#学习资源网站" class="headerlink" title="学习资源网站"></a>学习资源网站</h2><ol><li><p>小木虫（ <a href="http://emuch.net/">http://emuch.net/</a> ）里边有不少学术科研用得到的资料，且全部为免费的</p></li><li><p>普特英语 <a href="http://putclub.com/">http://putclub.com/</a> 增强英语听说的一个绝好地方</p></li><li><p>国家自然科学基金（ <a href="http://www.nsfc.gov.cn/Portal0/default40.htm">http://www.nsfc.gov.cn/Portal0/default40.htm</a> ）堪称中国科学研究的风向标</p></li><li><p>华军软件园（ <a href="http://www.newhua.com/index.htm">http://www.newhua.com/index.htm</a> ）下载的软件基本能用。</p></li><li><p>博研联盟（ <a href="http://www.bylm.net/forum/index.php">http://www.bylm.net/forum/index.php</a> ） -</p></li><li><p>人大经济论坛（ <a href="http://www.pinggu.org/bbs">http://www.pinggu.org/bbs</a> ）经济学资源下载、学习交流的网站。</p></li><li><p>丁香园（ <a href="http://www.dxy.cn/portal">http://www.dxy.cn/portal</a> ）医学、药学、生命科学专业论坛</p></li><li><p>中国生命科学论坛（ <a href="http://bbs.bioon.com/">http://bbs.bioon.com/</a> ）推荐理由：医学、药学、生命科学专业论坛。</p></li></ol><p>9.<a href="http://www.bbc.co.uk/worldservice/">http://www.bbc.co.uk/worldservice/</a> （学听力，学地道英语）</p><ol start="10"><li><p>教育学习资源搜索门户 – 搜教网 <a href="http://www.soojoo.cn/">http://www.soojoo.cn</a> 考研，英语， it 学习资源一网打尽</p></li><li><p>仲一互助游网 <a href="http://www.jooinn.com/">http://www.jooinn.com/</a> 没钱也能周游中国 !</p></li><li><p>开复学生网 <a href="http://kaifulee.com/google">http://kaifulee.com/google</a> 中国总裁为中国学生做的</p></li><li><p>我要模考网词汇练习： <a href="http://www.51mokao.com/Users/Use">http://www.51mokao.com/Users/Use</a> … &amp;type=languages</p></li><li><p>学习英语的好帮手。 <a href="http://edu.taisha.org/">http://edu.taisha.org</a></p></li><li><p>词汇量相当的惊人，有单词本，里边还有好多学习课程。 <a href="http://www.dict.cn/">http://www.dict.cn</a></p></li><li><p>设计之家，平面设计爱好者。 <a href="http://www.sj33.cn/">http://www.sj33.cn</a></p></li><li><p>专门的图标制作论坛。 <a href="http://www.iconfans.com/">http://www.iconfans.com</a></p></li><li><p>免费提供桌面壁纸。 <a href="http://www.kkdesk.com/">http://www.kkdesk.com</a></p></li><li><p>3 连素材，资源不少，免费。 <a href="http://www.3lian.com/">http://www.3lian.com</a></p></li><li><p>这是一个比较专业的设计类网站，在这里可以领略众多意想不到的创 </p></li></ol><p> <a href="http://www.visionunion.com/">http://www.visionunion.com</a></p><ol start="21"><li>各种考证网站汇总： <a href="http://www.topsage.com/">http://www.topsage.com/</a></li></ol><h2 id="考试资源网站"><a href="#考试资源网站" class="headerlink" title="考试资源网站"></a>考试资源网站</h2><ol start="22"><li>考试 163 ： <a href="http://www.test163.com/">http://www.test163.com</a> ( 大量的资格认真考试试题，计算机，英语视听材料 )</li></ol><p>23.IT 认证考试资源网 [<a href="http://www.itexamprep.com/">http://www.itexamprep.com</a>( 大量 IT 认证考试题库 )</p><ol start="24"><li><p>中国大学生网 [<a href="http://www.chinadaxuesheng.com/">http://www.chinadaxuesheng.com</a>( 题库 , 模拟题 , 论文 , 小学大学 )</p></li><li><p>中国考试网网 [<a href="http://www.sinoexam.com.cn/">http://www.sinoexam.com.cn</a>( 太多了 )</p></li><li><p>中国考研网 [<a href="http://www/">http://www</a>. 好好学习，天天校内 an.com( 想考研究生来看看吧 , 大量免费资源 )</p></li><li><p>考研网 [<a href="http://www.kaoyan.net/">http://www.kaoyan.net</a>( 也是考研的网站 , 大量免费资源 )</p></li><li><p>中国自考网 [<a href="http://www.chinazikao.com/">http://www.chinazikao.com</a>( 自学考试相关资源 )</p></li><li><p>出国考试网 [<a href="http://www.007test.com/">http://www.007test.com</a>( 出国考试过关习题等 )</p></li><li><p>天下资源网 [<a href="http://www.da126.com/">http://www.da126.com</a>( 出国考试过关习题 , 英语视听材料等 ) &lt; 外语学习 &gt;</p></li><li><p>择校学习网 [<a href="http://www.zexiao.com/">http://www.zexiao.com</a>( 出国学习外语 , 咨询等 )</p></li><li><p>163 考试网 [<a href="http://www.test163.com/">http://www.test163.com</a>( 要过 CET 的朋友要去看看，还有听力资料啊 )</p></li><li><p>英语之声 [<a href="http://www.4english.cn/">http://www.4english.cn</a>( 网上学习英语的好地方 )</p></li><li><p>疯狂英语俱乐部 [/]<a href="http://www.crazyenglish.org/">http://www.crazyenglish.org</a> 想了解疯狂英语吗 ?)</p></li><li><p>在线英语杂志 [<a href="http://www.englishcn.com/">http://www.englishcn.com</a>( 不错的地方 )</p></li><li><p>英语写作网 [<a href="http://www.4ewriting.com/">http://www.4ewriting.com</a>( 英语协作技巧等 )</p></li><li><p>英语周报 [<a href="http://www.ew.com.cn/">http://www.ew.com.cn</a>( 学习英语的好地方 )</p></li><li><p>英语角 [<a href="http://www.english-corner.com.cn/">http://www.english-corner.com.cn</a>( 看看吧 )</p></li><li><p>英语学习 <a href="http://www.dd234.com/">www.dd234.com</a></p></li></ol><h2 id="免费学习全世界最好的在线课程"><a href="#免费学习全世界最好的在线课程" class="headerlink" title="免费学习全世界最好的在线课程"></a>免费学习全世界最好的在线课程</h2><p>一流的大学的课程  <a href="https://www.coursera.org/">https://www.coursera.org/</a></p><p>果壳旗下的MOOC学院 <a href="http://mooc.guokr.com/">http://mooc.guokr.com/</a> </p><p>中国大学精品开放课程 爱课程  <a href="http://www.icourses.cn/home/">http://www.icourses.cn/home/</a> </p><p>网易公开课  <a href="http://open.163.com/">http://open.163.com/</a> </p><p>微软虚拟学院  <a href="http://www.microsoftvirtualacademy.com/">http://www.microsoftvirtualacademy.com/</a> </p><p>极客学院  <a href="http://www.jikexueyuan.com/">http://www.jikexueyuan.com/</a> </p><p>麦子学院 <a href="http://www.maiziedu.com/">http://www.maiziedu.com/</a> </p><p>番薯学院  <a href="http://www.fanshuxueyuan.com/">http://www.fanshuxueyuan.com/</a> </p><p>慕课网  <a href="http://www.imooc.com/">http://www.imooc.com/</a> </p><p>我要自学网  <a href="http://www.51zxw.net/default.aspx">http://www.51zxw.net/default.aspx</a> </p><p>百度传课   <a href="http://www.chuanke.com/">http://www.chuanke.com/</a> </p><p>腾讯精品课程   <a href="http://class.qq.com/">http://class.qq.com/</a></p><p>好大学在线  <a href="http://www.cnmooc.org/">http://www.cnmooc.org/</a></p><p>华文慕课  <a href="http://www.chinesemooc.org/">http://www.chinesemooc.org/</a></p><h2 id="下面这几个是纯英文的"><a href="#下面这几个是纯英文的" class="headerlink" title="下面这几个是纯英文的"></a>下面这几个是纯英文的</h2><p>E dX   <a href="https://www.edx.org/">https://www.edx.org/</a></p><p>Udacity  <a href="https://www.udacity.com/">https://www.udacity.com/</a></p><p>Open Learn  <a href="http://www.open.edu/openlearn/">http://www.open.edu/openlearn/</a></p><p>Iversity  <a href="https://iversity.org/">https://iversity.org/</a></p><p>Open2 study  <a href="https://www.open2study.com/">https://www.open2study.com/</a> </p><h2 id="学习计算机类的网站"><a href="#学习计算机类的网站" class="headerlink" title="学习计算机类的网站"></a>学习计算机类的网站</h2><p>优才学院   <a href="http://www.ucai.cn/">http://www.ucai.cn/</a></p><p>计蒜课   <a href="http://www.jisuanke.com/">http://www.jisuanke.com/</a></p><p>CODE  <a href="http://code.csdn.net/">http://code.csdn.net/</a></p><p>开课吧   <a href="http://www.kaikeba.com/">http://www.kaikeba.com/</a></p><h2 id="三大-BAT-巨头-在线教育"><a href="#三大-BAT-巨头-在线教育" class="headerlink" title="三大 BAT 巨头 在线教育"></a>三大 BAT 巨头 在线教育</h2><p>百度 ：</p><p>百度传课   <a href="http://www.chuanke.com/">http://www.chuanke.com/</a> </p><p>百度营销大学   <a href="http://edu.baidu.com/elearning.html">http://edu.baidu.com/elearning.html</a> </p><p>百度前端技术学院  <a href="http://ife.baidu.com/">http://ife.baidu.com/</a> </p><p>百度深度学习 实验室   <a href="http://idl.baidu.com/index.html">http://idl.baidu.com/index.html</a> </p><p>百度预测   <a href="http://trends.baidu.com/">http://trends.baidu.com/</a> </p><p>腾讯 :</p><p>腾讯大学 :     <a href="http://daxue.qq.com/">http://daxue.qq.com/</a></p><p>微信学院   <a href="http://daxue.qq.com/wechat">http://daxue.qq.com/wechat</a></p><p>开放平台学院   <a href="http://daxue.qq.com/open">http://daxue.qq.com/open</a></p><p>互联网学院   <a href="http://daxue.qq.com/internet">http://daxue.qq.com/internet</a></p><p>营销学院   <a href="http://daxue.qq.com/mkt">http://daxue.qq.com/mkt</a> </p><p>阿里</p><p>淘宝大学  <a href="http://daxue.taobao.com/">http://daxue.taobao.com/</a> </p><p>1688商学院 <a href="http://peixun.1688.com/">http://peixun.1688.com/</a> </p><p>阿里研究院   <a href="http://www.aliresearch.com/">http://www.aliresearch.com/</a> </p><p>免费学韩语的网站 :<a href="http://www.koreaxin.com/">www.koreaxin.com</a></p><p>各种考证网站汇总： <a href="http://www.topsage.com/">http://www.topsage.com/</a></p><p>中国 IT 实验室： <a href="http://www.chinaitlab.com/">http://www.chinaitlab.com/</a></p><h2 id="ENGLISH-PART"><a href="#ENGLISH-PART" class="headerlink" title="ENGLISH PART"></a>ENGLISH PART</h2><p>英语四级考试网  <a href="http://www.cet4v.com/">http://www.cet4v.com/</a></p><p>英语六级考试网  <a href="http://www.cet6w.com/">http://www.cet6w.com/</a></p><p>四六级考试网  <a href="http://www.cet-46.com/default.asp">http://www.cet-46.com/default.asp</a></p><p>中国雅思网  <a href="http://www.cnielts.com/">http://www.cnielts.com/</a></p><p>无忧雅思网  <a href="http://www.51ielts.com/">http://www.51ielts.com/</a></p><p>3G 雅思网 <a href="http://www.3gbbs.com/">http://www.3gbbs.com/</a></p><p>中国考试网  <a href="http://www.sinoexam.com.cn/">http://www.sinoexam.com.cn/</a></p><p>E 学网 <a href="http://www.exue.com/">http://www.exue.com/</a></p><p>旺旺英语  <a href="http://www.wwenglish.com/">http://www.wwenglish.com/</a></p><p>普特英语听力  <a href="http://www.putclub.com/">http://www.putclub.com/</a></p><p>中国英语学习网  <a href="http://www.24en.com/">http://www.24en.com/</a></p><p>英语翻译吧  <a href="http://www.fanyi8.com/">http://www.fanyi8.com/</a></p><p>英文写作网  <a href="http://www.4ewriting.com/">http://www.4ewriting.com/</a></p><p>新东方网络课堂  <a href="http://www.tol24.com/">http://www.tol24.com/</a></p><p>英语周报  <a href="http://www.ew.com.cn/">http://www.ew.com.cn/</a></p><p>英语 365 <a href="http://e365.cc163.net/">http://e365.cc163.net/</a></p><p>英文早报  <a href="http://gzmp.dayoo.com/">http://gzmp.dayoo.com/</a></p><p>英语时空  <a href="http://www.yysk.net/">http://www.yysk.net/</a></p><p>中国英语学习网  <a href="http://www.24en.com/">http://www.24en.com/</a></p><p>空中英语教室  <a href="http://www.kzyyjs.com/">http://www.kzyyjs.com/</a></p><p>AskMySite <a href="http://www.askmysite.com/">http://www.askmysite.com/</a></p><p>UrbanDictionary  ： <a href="http://www.urbandictionary.com/">http://www.urbandictionary.com/</a></p><p>英语点津  <a href="http://www.chinadaily.com.cn/language_tips/">http://www.chinadaily.com.cn/language_tips/</a></p><p>外语杂志  <a href="http://westmagz.com/default.asp">http://westmagz.com/default.asp</a></p><p>每日英语  <a href="http://blog.beanwoo.com/english">http://blog.beanwoo.com/english</a></p><p>EnglishBaby ： <a href="http://www.englishbaby.com/">http://www.englishbaby.com/</a></p><p>英语聊天室  <a href="http://chatto.us/">http://chatto.us/</a></p><p>米老师  <a href="http://missrice.com/Default.aspx">http://missrice.com/Default.aspx</a></p><h2 id="专四专八"><a href="#专四专八" class="headerlink" title="专四专八"></a>专四专八</h2><p>牛津英语网  <a href="http://www.oxford.com.cn/study/exam/major/">http://www.oxford.com.cn/study/exam/major/</a></p><p>考试大  <a href="http://www.examda.com/TEM/">http://www.examda.com/TEM/</a></p><p>中国英语学习网 <a href="http://www.24en.com/tem/">http://www.24en.com/tem/</a></p><p>沪江网  <a href="http://www.hjenglish.com/down/list/113/">http://www.hjenglish.com/down/list/113/</a></p><p>新挑战国际英语  <a href="http://www.tzcool.com/List2.asp?BClassID=4&amp;SClassID=18">http://www.tzcool.com/List2.asp?BClassID=4&amp;SClassID=18</a></p><p>中国考题网  <a href="http://www.ksw123.com/index_54.shtml">http://www.ksw123.com/index_54.shtml</a></p><p>星沙英语  <a href="http://www.rr365.com/english/List_700.html">http://www.rr365.com/english/List_700.html</a></p><p>大耳朵英语  <a href="http://www.ebigear.com/newslist-122-1.html">http://www.ebigear.com/newslist-122-1.html</a></p><p>真题网  <a href="http://www.pass-e.com/sort.php?sortid=25">http://www.pass-e.com/sort.php?sortid=25</a></p><p>就学网  <a href="http://www.joxue.com/joxue/en/id11/">http://www.joxue.com/joxue/en/id11/</a></p><h2 id="考研信息"><a href="#考研信息" class="headerlink" title="考研信息"></a>考研信息</h2><p>中国研究生招生信息网  <a href="http://www.chinayz.com.cn/">http://www.chinayz.com.cn/</a></p><p>考研网  <a href="http://www.kaoyan.net/">http://www.kaoyan.net/</a></p><p>中国考研网  <a href="http://www.chinakaoyan.com/">http://www.chinakaoyan.com/</a></p><p>考研教育网  <a href="http://www.cnedu.cn/">http://www.cnedu.cn/</a></p><p>21CN 考研 <a href="http://learning.21cn.com/kaoshi/kaoyan/">http://learning.21cn.com/kaoshi/kaoyan/</a></p><p>考研加油站  <a href="http://www.kaoyan.com/">http://www.kaoyan.com/</a></p><p>考研信息港  <a href="http://www.kaoyan365.com/">http://www.kaoyan365.com/</a></p><p>考研论坛  <a href="http://bbs.kaoyan.com/">http://bbs.kaoyan.com/</a></p><p>21 世纪考研网 <a href="http://www.21ky.net/">http://www.21ky.net/</a></p><p>清华考研远程辅导网  <a href="http://www.tsinghuatutor.com/">http://www.tsinghuatutor.com/</a></p><p>考研共济网  <a href="http://www.kaoyantj.com/">http://www.kaoyantj.com/</a></p><p>网大考研  <a href="http://www.netbig.com/exam/ch2.htm">http://www.netbig.com/exam/ch2.htm</a></p><p>考研宝典   <a href="http://www.exambook.net/">http://www.exambook.net/</a></p><p>考研同路人  <a href="http://www.17ky.com/">http://www.17ky.com/</a></p><p>北京考研网  <a href="http://www.010ky.com/">http://www.010ky.com/</a></p><p>研路资讯  <a href="http://www.roadedu.com/">http://www.roadedu.com/</a></p><p>导航考研  <a href="http://www.daohang.net/">http://www.daohang.net/</a></p><p>圣才考研网  <a href="http://www.100exam.com/">http://www.100exam.com/</a></p><p>3COM 免费考研网 <a href="http://kind887.518u.com/">http://kind887.518u.com/</a></p><p>OK 考研网 <a href="http://www.okkaoyan.cn/">http://www.okkaoyan.cn/</a></p><h2 id="留学信息"><a href="#留学信息" class="headerlink" title="留学信息"></a>留学信息</h2><p>教育涉外监管信息网  <a href="http://www.jsj.edu.cn/">http://www.jsj.edu.cn/</a></p><p>国家留学基金委员会  <a href="http://www.csc.edu.cn/gb/">http://www.csc.edu.cn/gb/</a></p><p>经教育部资格认定中介  <a href="http://www.jsj.edu.cn/mingdan/001.html">http://www.jsj.edu.cn/mingdan/001.html</a></p><p>教育部公布的外国学校  <a href="http://www.jsj.edu.cn/mingdan/004.html">http://www.jsj.edu.cn/mingdan/004.html</a></p><p>世纪出国资讯易网  <a href="http://www.21abroad.net/">http://www.21abroad.net/</a></p><p>北京留学网  <a href="http://www.bjlx.gov.cn/">http://www.bjlx.gov.cn/</a></p><p>中国留学人才信息网  <a href="http://www.chinatalents.gov.cn/">http://www.chinatalents.gov.cn/</a></p><p>艾迪国际  <a href="http://www.studyoz.com.cn/">http://www.studyoz.com.cn/</a></p><p>东方移民留学中心  <a href="http://www.visa2au.com/">http://www.visa2au.com/</a></p><p>国际教育留学资讯网  <a href="http://www.internationaledu.net/">http://www.internationaledu.net/</a></p><p>北京环球行留学服务  <a href="http://www.wefedu.com/">http://www.wefedu.com/</a></p><p>自在留学网  <a href="http://www.igoedu.com/">http://www.igoedu.com/</a></p><p>留学第一站  <a href="http://www.globeedu.com/">http://www.globeedu.com/</a></p><p>北京嘉华世达国际教育中心  <a href="http://www.chivast.com/">http://www.chivast.com/</a></p><p>中国教育服务中心  <a href="http://www.cesc.com.cn/">http://www.cesc.com.cn/</a></p><p>中教国际教育交流中心  <a href="http://www.cciee.com.cn/">http://www.cciee.com.cn/</a></p><p>高士登留学  <a href="http://www.gsdedu.com/">http://www.gsdedu.com/</a></p><p>DIY 留学法国 <a href="http://www.francediy.org/">http://www.francediy.org/</a></p><p>中国对外友好合作服务  <a href="http://www.youhao.net.cn/">http://www.youhao.net.cn/</a></p><p>中国出国人员服务总公司  <a href="http://www.cnsc-edu.com.cn/">http://www.cnsc-edu.com.cn/</a></p><h2 id="公务员考试"><a href="#公务员考试" class="headerlink" title="公务员考试"></a>公务员考试</h2><p>中国人事考试网  <a href="http://www.cpta.com.cn/">http://www.cpta.com.cn/</a></p><p>中国海关考录网  <a href="http://kaolu.customs.gov.cn/">http://kaolu.customs.gov.cn/</a></p><p>北京市人事考试网  <a href="http://www.bjpta.gov.cn/">http://www.bjpta.gov.cn/</a></p><p>中华人民共和国人事部  <a href="http://www.mop.gov.cn/">http://www.mop.gov.cn/</a></p><p>公务员考试指南针  <a href="http://www.softunnel.com/compass.htm">http://www.softunnel.com/compass.htm</a></p><p>国家公务员考试 _ 新浪 <a href="http://edu.sina.com.cn/focus/official.html">http://edu.sina.com.cn/focus/official.html</a></p><p>公务员考试 _ 新华网 <a href="http://www.xinhuanet.com/zhengfu/gwy/">http://www.xinhuanet.com/zhengfu/gwy/</a></p><p>公务员考试 _ 中招在线 <a href="http://www.yuloo.com/gwyks/">http://www.yuloo.com/gwyks/</a></p><p>腾讯公务员考试  <a href="http://edu.qq.com/official/">http://edu.qq.com/official/</a></p><p>公务员考试 _ 南开大学 <a href="http://career.nankai.edu.cn/official/">http://career.nankai.edu.cn/official/</a></p><p>公务员考试 _ 济宁信息港 <a href="http://edu.jninfo.net.cn/gwyks/">http://edu.jninfo.net.cn/gwyks/</a></p><p>福建录用公务员考试网  <a href="http://www.fjkl.gov.cn/">http://www.fjkl.gov.cn/</a></p><p>广东公务员考试网  <a href="http://www.gdgwy.net/">http://www.gdgwy.net/</a></p><p>广州人事信息网  <a href="http://www.gzpi.gov.cn/">http://www.gzpi.gov.cn/</a></p><h2 id="司法考试"><a href="#司法考试" class="headerlink" title="司法考试"></a>司法考试</h2><p>中国普法网 ( 司法部 ) <a href="http://www.legalinfo.gov.cn/">http://www.legalinfo.gov.cn/</a></p><p>法律教育网  <a href="http://www.chinalawedu.com/">http://www.chinalawedu.com/</a></p><p>中国司法考试在线  <a href="http://www.sifa2000.com/">http://www.sifa2000.com/</a></p><p>国家司法考试在线  <a href="http://www.sikao.com/">http://www.sikao.com/</a></p><p>国家司法考试网  <a href="http://www.bjsfj.com/">http://www.bjsfj.com/</a></p><p>律政中国司法考试网  <a href="http://www.lzschool.org.cn/">http://www.lzschool.org.cn/</a></p><p>全国司法考试试题辅导  <a href="http://www.sifakaoshi.net/">http://www.sifakaoshi.net/</a></p><p>司法统一考试  <a href="http://www.sftyks.com/">http://www.sftyks.com/</a></p><p>国家司法考试 _ 新浪网 <a href="http://edu.sina.com.cn/focus/lawyer.html">http://edu.sina.com.cn/focus/lawyer.html</a></p><p>万国司法考试  <a href="http://www.wanguoschool.net/">http://www.wanguoschool.net/</a></p><p>广州国家司法考试网  <a href="http://www.gzsk.gov.cn/">http://www.gzsk.gov.cn/</a></p><p>司法人  <a href="http://www.lawee.com.cn/">http://www.lawee.com.cn/</a></p><p>国家司法考试辅导培训  <a href="http://www.peixunwang.com/">http://www.peixunwang.com/</a></p><h2 id="计算机等级考试"><a href="#计算机等级考试" class="headerlink" title="计算机等级考试"></a>计算机等级考试</h2><p>全国计算机等级考试网  <a href="http://www.ncre.cn/">http://www.ncre.cn/</a></p><p>等级考试 _ 无忧服务站 <a href="http://www.wuyouschool.com.cn/">http://www.wuyouschool.com.cn/</a></p><p>信息产业部电子教育  <a href="http://www.ceiaec.org/">http://www.ceiaec.org/</a></p><p>思达网校 _IT 认证社区 <a href="http://www.staredu.net/">http://www.staredu.net/</a></p><p>软件水平考试  <a href="http://www.exam100.com/">http://www.exam100.com/</a></p><p>世纪软考  <a href="http://www.softexam.net/">http://www.softexam.net/</a></p><h2 id="人才招聘"><a href="#人才招聘" class="headerlink" title="人才招聘"></a>人才招聘</h2><p>高校毕业生网  <a href="http://www.myjob.edu.cn/">http://www.myjob.edu.cn/</a></p><p>中国高校就业联盟网  <a href="http://www.job9151.com/">http://www.job9151.com/</a></p><p>中国大学生就业见习网  <a href="http://www.54club.com/">http://www.54club.com/</a></p><p>北京市毕业生就业信息网  <a href="http://www.bjbys.com/">http://www.bjbys.com/</a></p><p>北京毕业生就业指导中心  <a href="http://www.bjbys.net.cn/">http://www.bjbys.net.cn/</a></p><p>北京毕业生就业中心  <a href="http://www.bjbys.net.cn/">http://www.bjbys.net.cn/</a></p><p>研究生人才网  <a href="http://www.91student.com/">http://www.91student.com/</a></p><p>智联招聘网   <a href="http://www.zhaopin.com/">http://www.zhaopin.com/</a> 全国，但以北京信息最多</p><p>中华英才网  <a href="http://www.chinahr.com/">http://www.chinahr.com</a></p><p>51job  <a href="http://www.51job.com/">http://www.51job.com/</a>     信息较多的是北京、上海、深圳、广州</p><p>中国俊才网 <a href="http://www.goodjob.cn/">http://www.goodjob.cn/</a> </p><p>易才网  <a href="http://www.job1998.com/">http://www.job1998.com/</a></p><p>易之易工作网  <a href="http://www.e2ejob.com/">http://www.e2ejob.com/</a></p><p>每日人才网  <a href="http://www.rc365.com/">http://www.rc365.com/</a></p><p>58 城网 - 兼职 <a href="http://www.58.com/jianzhi.aspx">http://www.58.com/jianzhi.aspx</a></p><p>中国经理人才网  <a href="http://www.m-jobcn.com/">http://www.m-jobcn.com/</a></p><p>HR 伴侣 <a href="http://www.hrbanlv.com/">http://www.hrbanlv.com/</a></p><p>中国人力资源联盟  <a href="http://www.hrsou.cn/">http://www.hrsou.cn/</a></p><p>智通人才招聘网  <a href="http://www.job5156.com/">http://www.job5156.com/</a></p><p>应届生求职网： <a href="http://yingjiesheng.com/">http://yingjiesheng.com/</a></p><p>中国招聘网： <a href="http://www.500zhaopin.com/">http://www.500zhaopin.com</a>  500 强企业招聘大型人才网，外企招聘和校园</p><p>招聘都有，以北京，上海，广东信息最多 .</p><p>校园招聘网 <a href="http://www.xyzp.net/">http://www.xyzp.net</a> 也是一个自动抓取各个学校就业中心信息的信</p><p>息汇总网站 .</p><h2 id="简历无忧"><a href="#简历无忧" class="headerlink" title="简历无忧"></a>简历无忧</h2><p>中国电子简历网  <a href="http://www.chinacv.net/">http://www.chinacv.net/</a></p><p>中国简历网  <a href="http://www.5520.org/">http://www.5520.org/</a></p><p>简历吧  <a href="http://www.resume8.com/">http://www.resume8.com/</a></p><p>中国人才指南网  <a href="http://www.cnrencai.com/">http://www.cnrencai.com/</a></p><p>简历中国  <a href="http://www.jlchina.cn/">http://www.jlchina.cn/</a></p><p>轻松简历网  <a href="http://www.easyresume.net/">http://www.easyresume.net/</a></p><p>中英文简历工作室  <a href="http://www.mycvcv.com/">http://www.mycvcv.com/</a></p><p>中国个人简历网  <a href="http://www.t135.com/">http://www.t135.com/</a></p><p>世纪简历网  <a href="http://www.21ren.com/">http://www.21ren.com/</a></p><p>中国求职简历网  <a href="http://www.jianli-sky.com/">http://www.jianli-sky.com/</a></p><p>兼职、实习、求职网站信息大全</p><p>首先，确定你的行业，和最关注的企业，把自己的简历放到人家的官方网站上（如 IBM 的官方招聘网址为 <a href="http://www-07.ibm.com/employment/cn/index.html">http://www-07.ibm.com/employment/cn/index.html</a> ），然后定期去心仪企业的网站察看最新职位，并申请！</p><p>其次，大多数的著名外企都会在以下最权威网站（如果时间有限就看这四个就够用了）发布自己的招聘职位和申请流程，</p><p><a href="http://www.chinahr.com/">http://www.chinahr.com</a></p><p><a href="http://www.51job.com/">http://www.51job.com</a></p><p><a href="http://www.zhaopin.com/">http://www.zhaopin.com</a></p><p><a href="http://www.fesco.com.cn/">http://www.fesco.com.cn</a> 实习和全职都有，希望大家每日 / 每周关注，一定会对自己的职业发展有帮助的！</p><h2 id="补充一些有用的网站"><a href="#补充一些有用的网站" class="headerlink" title="补充一些有用的网站"></a>补充一些有用的网站</h2><p>1 ， <a href="http://www.shixi.com.cn/">http://www.shixi.com.cn/</a> 中国实习网（刚刚起步，信息不多） </p><p>2, <a href="http://www.edeng.cn/data/china/job/index.html?r=34892">http://www.edeng.cn/data/china/job/index.html?r=34892</a> 易登兼职频道 ( 兼职实习信息较多，更新快 )</p><p>3 ， <a href="http://job.xsup.cn/">http://job.xsup.cn/</a> 学生新势力 ( 注册会员免费 , 信息更新还不错 )</p><p>4 ， <a href="http://www.gzjianzhi.com/">http://www.gzjianzhi.com/</a> 广州子凡兼职网 ( 需要注册为会员才能查看信息。注册会员免费 )</p><p>5 ， <a href="http://scc.pku.edu.cn/sub.asp">http://scc.pku.edu.cn/sub.asp</a> 北大就业信息网实习频道（可直接访问） </p><p>6 ， <a href="http://www.020stu.com/job/index.asp">http://www.020stu.com/job/index.asp</a> 广州学生网兼职 </p><p>7 ， <a href="http://www.gzca.com.cn/bbs/index.asp">http://www.gzca.com.cn/bbs/index.asp</a> 广州高校论坛兼职 </p><p>8 ， <a href="http://www.rmzp.com/">http://www.rmzp.com/</a> 人脉招聘网（找实习人脉还是很重要的） </p><p>9 ， <a href="http://www.54club.com/">http://www.54club.com</a> 中国大学生就业见习网 </p><p>10 ， <a href="http://bbs.pku.edu.cn/">http://bbs.pku.edu.cn/</a> 未名的实习版 </p><p>11 ， <a href="http://www.cnshixi.com/">http://www.cnshixi.com/</a> 中国实习网（竟然重名了，呵呵，广东地区信息较多） </p><p>12 ， <a href="http://www.globehr.com/">http://www.globehr.com/</a> 搜职网（自动搜索招聘信息，实习职位偏少） </p><p>13 ， <a href="http://www.jobok.com.cn/">http://www.jobok.com.cn/</a> 中国兼职网 </p><p>14 ， <a href="http://www.conningtech.com/index.php">http://www.conningtech.com/index.php</a> 大学生兼职网 </p><p>15 ， <a href="http://www.raya.cn/job/city_index.php">http://www.raya.cn/job/city_index.php</a> 瑞雅网兼职频道 </p><p>16 ， <a href="http://www.haojz.com/index.asp">http://www.haojz.com/index.asp</a> 广州家政网 </p><p>17 ， <a href="http://www.cnshixi.com/index.asp">http://www.cnshixi.com/index.asp</a> 大学生实习网</p><p>另可参考以下渠道：</p><p>毕业生必须知道的就业信息渠道 !!!!</p><h2 id="毕业生必须知道的就业信息渠道"><a href="#毕业生必须知道的就业信息渠道" class="headerlink" title="毕业生必须知道的就业信息渠道"></a>毕业生必须知道的就业信息渠道</h2><p>1  校就业指导中心－－校就业网 ,bbs- 走向社会</p><p>2  院系学工办   －－信件，电话通知等方式</p><p>3  各班班长－－通知本人</p><p>4  北京大学就业网－只可以看到目录－将目录输入到“百度”搜索</p><p>5 除北京大学、人民大学无法直接进入查看信息外，其他大多数大学就业网都可以直</p><p>接进入，如清华大学就业网－－可以随意进入</p><p>请大家注意保留，以下就业网可以随便进入不需要身份验证！</p><p>同济大学： <a href="http://tj91.tongji.edu.cn/index.portal#">http://tj91.tongji.edu.cn/index.portal#</a></p><p>西北大学： <a href="http://news.nwu.edu.cn/nwujobcizi/">http://news.nwu.edu.cn/nwujobcizi/</a></p><p>哈工大   ： <a href="http://som.hit.edu.cn/glxyxgb01/sub.asp?no=7">http://som.hit.edu.cn/glxyxgb01/sub.asp?no=7</a></p><p>东南大学： <a href="http://xsc.seu.edu.cn/bf/introCo">http://xsc.seu.edu.cn/bf/introCo</a> … Key2=&amp;Post=Post</p><p>华东师范： <a href="http://www.career.ecnu.edu.cn/commonpage/in">http://www.career.ecnu.edu.cn/commonpage/in</a> ｆｒｏｍ ation.aspx</p><p>北京大学： <a href="http://scc.pku.edu.cn/sub.asp?id=8">http://scc.pku.edu.cn/sub.asp?id=8</a></p><p>清华大学： <a href="http://scc.pku.edu.cn/sub.asp?id=8">http://scc.pku.edu.cn/sub.asp?id=8</a></p><p>中国农大： <a href="http://scc.cau.edu.cn/Zp/zpxx.aspx">http://scc.cau.edu.cn/Zp/zpxx.aspx</a></p><p>北京师大： <a href="http://202.112.92.112/">http://202.112.92.112/</a></p><p>offer 收割机： <a href="http://offer.xyzp.net/">http://offer.xyzp.net</a></p><p>北京高校毕业生信息网： <a href="http://scc.cau.edu.cn/Zp/zpxx.aspx">http://scc.cau.edu.cn/Zp/zpxx.aspx</a></p><p>长三角人才网： <a href="http://www.job360.com/">http://www.job360.com/</a></p><p>天津人才网： <a href="http://www.tjrc.com.cn/">http://www.tjrc.com.cn/</a></p><p>江苏人才： <a href="http://www.jsrsrc.com/">http://www.jsrsrc.com/</a></p><p>南京人才： <a href="http://www.njrsrc.com/">http://www.njrsrc.com/</a></p><p>浙江人才  <a href="http://www.zjrc.com/">www.zjrc.com</a></p><p>杭州人才  <a href="http://www.hzrc.com/">www.hzrc.com</a></p><p>中华英才： <a href="http://www.chinahr.com/">www.chinahr.com</a></p><p>智联招聘： <a href="http://www.zhaopin.com/">www.zhaopin.com</a></p><p>前程无忧： <a href="http://www.51job.com/">www.51job.com</a></p><p>校园招聘一网打尽，好多学校 bbs 的招聘信息： <a href="http://www.xyzp.net/">http://www.xyzp.net/</a></p><p>数字英才： <a href="http://www.01hr.com/">http://www.01hr.com/</a></p><p>中聘网： <a href="http://www.pincn.com/">http://www.pincn.com/</a></p><p>中国青年人才网： <a href="http://www.54job.com/">http://www.54job.com/</a></p><p>中国校园招聘网： <a href="http://www.91job.net.cn/">http://www.91job.net.cn/</a></p><p>中国高校毕业生就业信息网： <a href="http://www.myjob.edu.cn/">http://www.myjob.edu.cn/</a></p><p>高校毕业生就业联盟： <a href="http://www.job9151.com/t_index.asp">http://www.job9151.com/t_index.asp</a></p><p>中国企业人才网： <a href="http://www.job100.com/default.asp">http://www.job100.com/default.asp</a></p><p>中国校园网： <a href="http://www.54youth.com.cn/">http://www.54youth.com.cn/</a></p><p>研究生人才网： <a href="http://www.91student.com/">http://www.91student.com/</a></p><p>地方性的有：</p><p>得得人才网： <a href="http://www.dedejob.com/">http://www.dedejob.com</a> 全国，北京上海为主；</p><p>上海人才网： <a href="http://www.001hr.net/">http://www.001hr.net</a> 上海及浙江、江苏东；</p><p>上海人才市场： <a href="http://www.hr.net.cn/">http://www.hr.net.cn</a> 上海</p><p>广州人才网： <a href="http://www.020job.com/">http://www.020job.com</a> 广州及周边</p><p>128 人才网： <a href="http://www.job128.com/">http://www.job128.com</a> 广东、北京</p><p>北京科技人才网： <a href="http://www.bjkjrc.com/">http://www.bjkjrc.com</a> 北京</p><p>另外转载：</p><p>1 ， <a href="http://intern.hiall.com.cn/">http://intern.hiall.com.cn</a> Hiall 实习社区（隆重推荐！！！）</p><p>2 ， <a href="http://scc.pku.edu.cn/sub.asp?id=9">http://scc.pku.edu.cn/sub.asp?id=9</a> 北大就业信息网实习频道（可直接访问）</p><p>3 ， <a href="http://jx.edu.sina.com.cn/">http://jx.edu.sina.com.cn/</a> 54club （上海地区的职位偏多）</p><p>4 ， <a href="http://www3.newsmth.com/bbsdoc.php?board=Intern">http://www3.newsmth.com/bbsdoc.php?board=Intern</a> 水木实习版（技术类职位多）</p><p>5 ， <a href="http://bbs.ruc.edu.cn/bbsdoc.php?board=intern">http://bbs.ruc.edu.cn/bbsdoc.php?board=intern</a> 人大实习版（外校不好上）</p><p>6 ， <a href="http://www.shixi.com.cn/">http://www.shixi.com.cn/</a> 中国实习网（刚刚起步，信息不多）</p><p>7 ， <a href="http://www.cnshixi.com/">http://www.cnshixi.com/</a> 中国实习网（竟然重名了，呵呵，广东地区信息较多）</p><p>8 ， <a href="http://www.globehr.com/">http://www.globehr.com/</a> 搜职网（自动搜索招聘信息）</p><p>9 ， <a href="http://www.tianji.com/">http://www.tianji.com/</a> 天际网（很多牛师兄师姐在上面，人脉求职）</p><p><a href="http://career.em.tsinghua.edu.cn/">http://career.em.tsinghua.edu.cn</a>  清华经管职业发展网</p><p>电气、电信、通讯专业王牌专业课程汇总</p><p><a href="http://blog.xiaonei.com/GetEntry.do?id=315442669&amp;owner=236620117">http://blog.xiaonei.com/GetEntry.do?id=315442669&amp;owner=236620117</a></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
      <tag>学习</tag>
      
      <tag>网站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构预备知识</title>
    <link href="/2022/01/27/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/01/27/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、C语言常识"><a href="#一、C语言常识" class="headerlink" title="一、C语言常识"></a>一、C语言常识</h1><ul><li>C程序规定一个程序中有<strong>一个或多个函数</strong>，他们是C程序的基本模块。但必须有且<strong>只有一个main函数</strong>。</li><li>C程序的执行将从main函数开始，到main函数结束而停止。 </li><li>main()是一个函数的名字,括号里面的<strong>void表示空的</strong>，这里指<strong>不接受任何参数</strong>。</li><li>只需要把int和void看作是用来定义<strong>main()函数的标准</strong>即可</li></ul><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span>                 <span class="hljs-comment">/*#include语句是C预处理指令，引入标准输入输出头文件*/</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>                  <span class="hljs-comment">/*主函数，前面的int指明main()函数的返回类型为整数（integer）*/</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> number;            <span class="hljs-comment">/*定义个名字叫做number的变量，C语言中所有变量必须在使用前定义*/</span><br>    number=<span class="hljs-number">2021</span>;                <span class="hljs-comment">/*给number赋一个值*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello ! I am a person.\n&quot;</span>);    <span class="hljs-comment">/*调用printf()函数，将引号中间的内容显示到屏幕上*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This year is %d\n&quot;</span>,number); <span class="hljs-comment">//%d占位符，表示输出number值的位置和形式(十进制)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//返回值，只需理解为这是满足C的标准要求</span><br>&#125;<br><br>运行结果：<br>Hello ! I am a person.<br>This year is <span class="hljs-number">2021</span><br></code></pre></td></tr></table></figure><p>C语言的重要性就不多说，学习编程，实践很重要，学校OJ的网址<a href="http://acm.zzuli.edu.cn/">ZZULIOJ</a>，咱们学校考研复试也要C语言上机，重点就是前200道题。比如题目编号1000，整数a+b，最简单入门的一道题，计算两个整数的和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span><span class="hljs-comment">//标准输入输出</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b,c;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);<span class="hljs-comment">//读入a和b</span><br>c=a+b;<span class="hljs-comment">//计算a+b的值赋给c</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,c);<span class="hljs-comment">//输出c</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到scanf读入数据的时候需要加&amp;取地址符，而printf输出数据的时候却不用，想一想为什么？</p><p>因为scanf要往你的变量里写入数值，所以他必须知道那个变量的地址，至于变量里存的是什么值，他是不管的，反正他写入之后就被覆盖成新的值了<br>对比printf，他是要输出变量里的数值，他只管要那个值，至于地址在哪，他也无所谓<br>这就是写和读的本质性区别，<strong>写只要地址，读只要值</strong></p><p>变量其实同时有地址和值两个东西，我们一般用一个变量，都是直接写一个名字，其实如果这个名字在赋值号右边，就是代表值，如果在赋值号左边，就是代表地址，写出来一样，意义是不一样的，编译器自动帮你选择了正确的意义<br>变量名字写在函数参数里面时，和写在赋值号右边一样，也是代表值，可是像scanf这种函数，他确实需要地址，编译器只认识赋值号，不认识scanf，没法自动选到正确的东西，这时就需要你手动加一个取地址的符号&amp;，明确告诉编译器去选择变量的地址给这个scanf来用。</p><blockquote><p>关于地址或指针的知识，后面也会详细介绍。</p></blockquote><h2 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i, sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span><span class="hljs-comment">/*语句①*/</span>; i&lt;=<span class="hljs-number">100</span><span class="hljs-comment">/*语句②*/</span>; i++<span class="hljs-comment">/*语句③*/</span>)&#123;<br>        sum+=i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(表达式<span class="hljs-number">1</span>; 表达式<span class="hljs-number">2</span>; 表达式<span class="hljs-number">3</span>)&#123;<br>  语句块<br>&#125;<br></code></pre></td></tr></table></figure><p>它的运行过程为：</p><ol><li><p>先执行“表达式1”。</p></li><li><p>再执行“表达式2”，如果它的值为真（非0），则执行循环体，否则结束循环。</p></li><li><p>执行完循环体后再执行“表达式3”。</p></li><li><p>重复执行步骤 2) 和 3)，直到“表达式2”的值为假，就结束循环。</p></li></ol><p>上面的步骤中，2) 和 3) 是一次循环，会重复执行，for 语句的主要作用就是不断执行步骤 2) 和 3)。</p><p>“表达式1”仅在第一次循环时执行，以后都不会再执行，可以认为这是一个初始化语句。“表达式2”一般是一个关系表达式，决定了是否还要继续下次循环，称为“循环条件”。“表达式3”很多情况下是一个带有自增或自减操作的表达式，以使循环条件逐渐变得“不成立”。</p><h1 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h1><p>把数据放入内存，必须先要分配内存空间。放入4个整数，就得分配4个<code>int</code>类型的内存空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a[<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><p>这样，就在内存中分配了4个<code>int</code>类型的内存空间，共 4×4=16 个字节，并为它们起了一个名字，叫<code>a</code>。</p><p>访问数组元素的格式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">a[index]<br></code></pre></td></tr></table></figure><p>index 为数组下标。注意 index 的值必须大于等于零，并且小于数组长度，否则会发生<strong>数组越界</strong>，出现意想不到的错误，</p><p>当赋予数组的元素个数超过数组长度时，就会发生<strong>溢出（Overflow）</strong>。如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> a[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>数组长度为3，初始化时却赋予5个元素，超出了数组容量，所以只能保存前3个元素，后面的元素被丢弃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>];     <span class="hljs-comment">//定义一个数组名为a，存储100个int类型的数组,其元素分别是a[0]~a[99]</span><br><span class="hljs-keyword">float</span> b[<span class="hljs-number">10</span>];    <span class="hljs-comment">//数组名为b的，存储10个float类型的数组,其元素分别是b[0]~b[9]</span><br><span class="hljs-keyword">char</span> c[<span class="hljs-number">256</span>]；    <span class="hljs-comment">//定义一个数组名为c的字符型数组 长度为256,其元素分别是c[0]~c[255]</span><br></code></pre></td></tr></table></figure><ul><li><strong>数组</strong>是一个整体，它的<strong>内存是连续</strong>的；也就是说，数组元素之间是相互挨着的，彼此之间没有一点点缝隙。</li><li>一般情况下，<strong>数组名</strong>会转换为数组的<strong>地址</strong>，需要使用地址的地方，直接使用数组名即可</li><li>数组中的每个元素都有一个序号，这个序号<strong>从0开始</strong>，而不是从1开始，称为<strong>下标（Index）</strong></li><li>数组中每个元素的<strong>数据类型必须相同</strong>，对于<code>int a[4];</code>，每个元素都必须为 int。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义的时候初始化</span><br><br><span class="hljs-comment">//定义一个整型数组a，前5个元素即赋值为1，2，3，4，5,后95个元素值值全部为0</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <br><br><span class="hljs-comment">//定义float数组b并对全部float类型的元素都分别赋值</span><br><span class="hljs-keyword">float</span> b[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3.3</span>,<span class="hljs-number">4.4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">6.6</span>,<span class="hljs-number">7.7</span>,<span class="hljs-number">8.8</span>,<span class="hljs-number">9.9</span>,<span class="hljs-number">0.0</span>&#125;;  <br><br><span class="hljs-comment">//定义一个数组名为c的字符型数组 并对前9个元素进行赋值，其余元素全部为&#x27;\0&#x27;</span><br><span class="hljs-comment">//&#x27;\0&#x27;是字符串结束的标志</span><br><span class="hljs-keyword">char</span> c[<span class="hljs-number">256</span>]=&#123;<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/01/27/MDe6nN4CFtZH2bl.png" alt="image-20210809122403782" style="zoom:50%;" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> str[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;abc123&quot;</span>;<br></code></pre></td></tr></table></figure><p>在C语言中，字符串总是以<code>&#39;\0&#39;</code>作为结尾，所以<code>&#39;\0&#39;</code>也被称为字符串结束标志，或者字符串结束符。</p><p><code>&quot;abc123&quot;</code>看起来只包含了 6 个字符，我们却将 str 的长度定义为 7，就是为了能够容纳最后的<code>&#39;\0&#39;</code>。如果将 str 的长度定义为 6，它就无法容纳<code>&#39;\0&#39;</code>了</p><h1 id="三、C语言指针"><a href="#三、C语言指针" class="headerlink" title="三、C语言指针"></a>三、C语言指针</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><h3 id="1-1-为什么要用数据类型？"><a href="#1-1-为什么要用数据类型？" class="headerlink" title="1.1    为什么要用数据类型？"></a>1.1    为什么要用数据类型？</h3><p>答：数据类型用来说明数据的类型，确定了数据的解释方式，让计算机和程序员不会产生歧义</p><p>因为对于不同的对象，不同的数据类型更具有代表性</p><p>为了合理地利用空间， 将数据分为多种数据类型</p><p>基本类型：char     short    int    long    float    </p><h3 id="1-2-为什么int占4个字节？（32位）"><a href="#1-2-为什么int占4个字节？（32位）" class="headerlink" title="1.2    为什么int占4个字节？（32位）"></a>1.2    为什么int占4个字节？（32位）</h3><p>答：可以说是微软规定好的，一个字节(byte)等于8位bit,因为计算机只认识0和1，所以一个字节的长度为2的八次方，</p><p>4个字节就是2的32次方   所以最大值为2的32次方-1=4294967295</p><h3 id="1-3-int数据类型的取值范围是多少？"><a href="#1-3-int数据类型的取值范围是多少？" class="headerlink" title="1.3    int数据类型的取值范围是多少？"></a>1.3    int数据类型的取值范围是多少？</h3><p>答：32位无符号整数 ， 其表示范围是2的32次方，最大整数为 2的32次方-1，（最小数是32位每一位都是0，因此减1）</p><p>有符号数则要去除一个符号位，正数最大为2的31次方-1 , 负数最小为负 2的31次方 </p><img src="https://s2.loli.net/2022/01/27/Y9UD8J7KWSAIMdu.png" alt="image-20210808082138470" style="zoom: 50%;" /> <h3 id="1-4-数据类型长度-sizeof-运算符"><a href="#1-4-数据类型长度-sizeof-运算符" class="headerlink" title="1.4 数据类型长度 sizeof()运算符"></a>1.4 数据类型长度 sizeof()运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//sizeof运算符，用来求某一类型变量的长度</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span><span class="hljs-comment">//standard library标准库头文件</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(ch)=%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(ch));<span class="hljs-comment">//sizeof以字节为单位返回某操作数的大小</span><br>    <br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(num)=%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(num));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sizeof</span>(ch)=<span class="hljs-number">1</span><br><span class="hljs-keyword">sizeof</span>(num)=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/01/27/4EnUP19jiBI7pzx.png" alt="image-20210808085950929" style="zoom:50%;" /> <p><strong>数据类型占内存的位数实际上与操作系统的位数和编译器（不同编译器支持的位数可能有所不同）都有关</strong>，具体某种数据类型占字节数得编译器根据操作系统位数两者之间进行协调好后分配内存大小。具体在使用的时候如想知道具体占内存的位数通过**sizeof(int)**可以得到准确的答案</p><p>1B = 8b    一个小b只能存放0或1</p><h2 id="2-内存"><a href="#2-内存" class="headerlink" title="2. 内存"></a>2. 内存</h2><h3 id="2-1-内存是什么？"><a href="#2-1-内存是什么？" class="headerlink" title="2.1 内存是什么？"></a>2.1 内存是什么？</h3><img src="https://s2.loli.net/2022/01/27/c5HUyXx4gGdKSCn.png" alt="image-20210808090435024" style="zoom: 67%;" /><img src="https://s2.loli.net/2022/01/27/Kf9iaeE2HJAIy3O.png" alt="image-20210808091003155" style="zoom:50%;" /> <h3 id="2-2-为什么计算机需要内存？"><a href="#2-2-为什么计算机需要内存？" class="headerlink" title="2.2 为什么计算机需要内存？"></a>2.2 为什么计算机需要内存？</h3><p>那是因为计算机上的<strong>CPU中央处理器</strong>需要不断处理电脑硬盘上的数据，</p><p>但是CPU速度太快，动辄几Ghz，而<strong>硬盘速度太慢</strong>，传输速度才不到200mb/s，延迟还大，即使是固态硬盘也差的很远，完全无法跟上CPU的处理速度，这样必然会导致<strong>性能下降</strong>。</p><p>于是工程师就在cpu中设计了<strong>缓存</strong>，一二三级缓存充当了数据临时仓库的作用，而且速度很快，但是受限于成本和CPU面积，这个<strong>缓存空间很有限</strong>，根本放不开多少数据，于是就在CPU缓存和硬盘之间又加入了新的存储器：<strong>内存</strong>。</p><h3 id="2-3-内存地址"><a href="#2-3-内存地址" class="headerlink" title="2.3 内存地址"></a>2.3 内存地址</h3><p>内存的管理：将内存抽象成一个很大的一维数组</p><p>对内存中每一个字节分配一个32位或64位的编号（与32位或64位处理器有关）</p><p>这个编号我们称之为<strong>内存地址</strong></p><img src="https://s2.loli.net/2022/01/27/vmakyGLFefpcSJ6.png" alt="image-20210808092812590" style="zoom:50%;" />    <p>char：占一个字节，分配一个地址</p><p>int：占四个字节，分配四个地址</p><h3 id="2-4-为什么内存地址以字节为单位？"><a href="#2-4-为什么内存地址以字节为单位？" class="headerlink" title="2.4 为什么内存地址以字节为单位？"></a>2.4 为什么内存地址以字节为单位？</h3><p>根据内存的物理结构，<strong>因为在内存中最小单位就是字节。所以操作系统在管理它的时候，最小单位也就是字节了</strong></p><h2 id="3-C语言指针"><a href="#3-C语言指针" class="headerlink" title="3. C语言指针"></a>3. C语言指针</h2><p>计算机中所有的数据都必须放在<strong>内存</strong>中运行，不同类型的数据占用的字节数不一样，例如 int 占用 4 个字节。为了正确地访问这些数据，必须为每个字节都编上号码。</p><p>下图是 4G 内存中每个字节的编号（以十六进制表示）：<br><img src="https://s2.loli.net/2022/01/27/PFRL7A5QumTwapE.png" alt="4G 内存中每个字节的编号"></p><p>这内存中字节的编号称为地址（Address）或指针（Pointer）。地址从 0 开始依次增加。</p><p>对于 32 位环境，程序能够使用的内存为 <strong>4GB</strong>，最小的地址为 0，最大的地址为 0XFFFFFFFF。我们来验证一下为什么是4G。</p><p>下面是内存单位的一些进制转换：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">K是千 M是兆 G是吉咖 T是太拉<br><br>8bit(位)=1Byte(字节)<br><br>1024Byte(字节)=1KB<br><br><span class="hljs-attribute">1024KB</span>=1MB<br><br><span class="hljs-attribute">1024MB</span>=1GB<br><br><span class="hljs-attribute">1024GB</span>=1TB<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/27/rs7US1ktImpMDFc.png" alt="image-20210816214010338"> </p><p>可以看到16进制的FFFFFFFF转换为十进制为4294967295,再加上全0，一共是4294967296个字节</p><p>而4G  =  4*1024M  =  4*1024*1024K =4*1024*1024*1024byte（字节）=4294967296 byte (字节）刚好相等，所以说对于 32 位环境，程序能够使用的内存为 <strong>4GB</strong></p><p>下面的代码演示了如何输出一个地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;c.biancheng.net&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#X, %#X\n&quot;</span>, &amp;a, str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>0X60FEEC, 0X60FED8</p><p><code>%#X</code>表示以十六进制形式输出，并附带前缀<code>0X</code>。a 是一个变量，用来存放整数，需要在前面加<code>&amp;</code>来获得它的地址；</p><p>str 本身就表示字符串的首地址，不需要加<code>&amp;</code>。</p><p>CPU 访问内存时需要的是地址，而不是变量名和函数名！变量名和函数名只是地址的一种助记符，当源文件被编译和链接成可执行程序后，它们都会被替换成地址。编译和链接过程的一项重要任务就是找到这些名称所对应的地址。</p><p>假设变量 a、b、c 在内存中的地址分别是 0X1000、0X2000、0X3000，那么加法运算<code>c = a + b;</code>将会被转换成类似下面的形式：</p><p>0X3000 = (0X1000) + (0X2000);</p><p><code>( )</code>表示取值操作，整个表达式的意思是，取出地址 0X1000 和 0X2000 上的值，将它们相加，把相加的结果赋值给地址为 0X3000 的内存</p><p>变量名和函数名为我们提供了方便，让我们在编写代码的过程中可以使用易于阅读和理解的英文字符串，不用直接面对二进制地址。</p><p>需要注意的是，虽然变量名、函数名、字符串名和数组名在本质上是一样的，它们都是地址的助记符。</p><h3 id="3-1-指针与指针变量"><a href="#3-1-指针与指针变量" class="headerlink" title="3.1 指针与指针变量"></a>3.1 指针与指针变量</h3><p>数据在内存中的地址也称为指针，如果一个变量存储了一份数据的指针，我们就称它为<strong>指针变量</strong>。</p><p>现在假设有一个 char 类型的变量 c，它存储了字符 ‘K’（ASCII码为十进制数 75），并占用了地址为 0X11A 的内存（地址通常用十六进制表示）。另外有一个指针变量 p，它的值为 0X11A，正好等于变量 c 的地址，这种情况我们就称 p 指向了 c，或者说 p 是指向变量 c 的指针。</p><p><img src="https://s2.loli.net/2022/01/27/1p769afZkQgw4in.png" alt="img"></p><h4 id="1-定义指针变量"><a href="#1-定义指针变量" class="headerlink" title="1.定义指针变量"></a>1.定义指针变量</h4><p>定义指针变量与定义普通变量非常类似，不过要在变量名前面加星号<code>*</code>，格式为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> *p1;<span class="hljs-regexp">//</span><span class="hljs-string">`*`</span>表示这是一个指针变量，<span class="hljs-string">`int`</span>表示该指针变量所指向的数据的类型 为整型。<br></code></pre></td></tr></table></figure><p>p1 是一个指向 int 类型数据的指针变量，至于 p1 究竟指向哪一份数据，应该由赋予它的值决定。再如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a = <span class="hljs-number">100</span><span class="hljs-comment">;int *p_a = &amp;a;</span><br></code></pre></td></tr></table></figure><p>在定义指针变量 p_a 的同时对它进行初始化，并将变量 a 的地址赋予它，此时 p_a 就指向了 a。值得注意的是，p_a 需要的一个地址，a 前面必须要加取地址符<code>&amp;</code>，否则是不对的。</p><p><code>*</code>是一个特殊符号，表明一个变量是指针变量，定义 p1、p2 时必须带<code>*</code>。而给 p1、p2 赋值时，因为已经知道了它是一个指针变量，就没必要多此一举再带上<code>*</code>，后边可以像使用普通变量一样来使用指针变量。也就是说，**定义指针变量时必须带<code>*</code>，给指针变量赋值时不能带<code>*</code>**。</p><p>假设变量 a、b、c、d 的地址分别为 0X1000、0X1004、0X2000、0X2004，下面的示意图很好地反映了 p1、p2 指向的变化：</p><p><img src="https://s2.loli.net/2022/01/27/fvRe6Ew4q9A5CYH.jpg" alt="img"></p><p>需要强调的是，**p1、p2 的类型分别是<code>float*</code>和<code>char*</code>**，而不是<code>float</code>和<code>char</code>，它们是完全不同的数据类型，要引起注意。</p><p>指针变量也可以连续定义，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *a, *b, *c;  <span class="hljs-comment">//a、b、c 的类型都是 int*</span><br></code></pre></td></tr></table></figure><p>注意每个变量前面都要带<code>*</code>。如果写成下面的形式，那么只有 a 是指针变量，b、c 都是类型为 int 的普通变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *a, b, c;<br></code></pre></td></tr></table></figure><h4 id="2-通过指针变量取得数据"><a href="#2-通过指针变量取得数据" class="headerlink" title="2.通过指针变量取得数据"></a>2.通过指针变量取得数据</h4><p>指针变量存储了数据的地址，通过指针变量能够获得该地址上的数据，格式为：</p><p>*p;</p><p>这里的<code>*</code>称为指针运算符，用来取得某个地址上的数据，请看下面的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">int</span> *p = &amp;a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d\n&quot;</span>, a, *p);  <span class="hljs-comment">//两种方式都可以输出a的值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>15, 15</p><p>假设 a 的地址是 0X1000，p 指向 a 后，p 本身的值也会变为 0X1000，<em>p 表示获取地址 0X1000 上的数据，也即变量 a 的值。从运行结果看，</em>p 和 a 是等价的。</p><p>虽然通过 *p 和 a 获取到的数据一样，但它们的运行过程稍有不同：a 只需要一次运算就能够取得数据，而 *p 要经过两次运算，多了一层“间接”。</p><p>假设变量 a、p 的地址分别为 0X1000、0XF0A0，它们的指向关系如下图所示：</p><p><img src="https://s2.loli.net/2022/01/27/68AtojJMnURqGuX.jpg" alt="img"></p><p>程序被编译和链接后，a、p 被替换成相应的地址。使用 *p 的话，要先通过地址 0XF0A0 取得变量 p 本身的值，这个值是变量 a 的地址，然后再通过这个值取得变量 a 的数据，前后共有两次运算；而使用 a 的话，可以通过地址 0X1000 直接取得它的数据，只需要一步运算。</p><p>指针除了可以获取内存上的数据，也可以修改内存上的数据，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">15</span>, b = <span class="hljs-number">99</span>, c = <span class="hljs-number">222</span>;<br>    <span class="hljs-keyword">int</span> *p = &amp;a;  <span class="hljs-comment">//定义指针变量</span><br>    *p = b;  <span class="hljs-comment">//通过指针变量修改内存上的数据</span><br>    c = *p;  <span class="hljs-comment">//通过指针变量获取内存上的数据</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d, %d, %d\n&quot;</span>, a, b, c, *p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>99, 99, 99, 99</p><p>*p 代表的是 a 中的数据，它等价于 a，可以将另外的一份数据赋值给它，也可以将它赋值给另外的一个变量。</p><p><code>*</code>在不同的场景下有不同的作用：<code>*</code>可以用在指针变量的定义中，表明这是一个指针变量，以和普通变量区分开；使用指针变量时在前面加<code>*</code>表示获取指针指向的数据，或者说表示的是指针指向的数据本身。</p><p>也就是说，定义指针变量时的<code>*</code>和使用指针变量时的<code>*</code>意义完全不同。以下面的语句为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> *p = &amp;a;*p = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>第1行代码中<code>*</code>用来指明 p 是一个指针变量，第2行代码中<code>*</code>用来获取指针指向的数据。</p><p>【示例】通过指针交换两个变量的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>, b = <span class="hljs-number">999</span>, temp;<br>    <span class="hljs-keyword">int</span> *pa = &amp;a, *pb = &amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d, b=%d\n&quot;</span>, a, b);<br>    <span class="hljs-comment">/*****开始交换*****/</span><br>    temp = *pa;  <span class="hljs-comment">//将a的值先保存起来</span><br>    *pa = *pb;  <span class="hljs-comment">//将b的值交给a</span><br>    *pb = temp;  <span class="hljs-comment">//再将保存起来的a的值交给b</span><br>    <span class="hljs-comment">/*****结束交换*****/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d, b=%d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>a=100, b=999<br>a=999, b=100</p><h4 id="3-关于-和-amp"><a href="#3-关于-和-amp" class="headerlink" title="3.关于 * 和 &amp;"></a>3.关于 * 和 &amp;</h4><p>已知有一个 int 类型的变量 a，pa 是指向它的指针.</p><p><strong><code>*&amp;a </code></strong>  可以理解为<code>*(&amp;a)</code>，<code>&amp;a</code>表示取变量 a 的地址（等价于 pa），<code>*(&amp;a)</code>表示取这个地址上的数据（等价于 *pa），绕来绕去，又回到了原点，<code>*&amp;a</code>仍然等价于 a。</p><p><strong><code>&amp;*pa</code></strong>  可以理解为<code>&amp;(*pa)</code>，<code>*pa</code>表示取得 pa 指向的数据（等价于 a），<code>&amp;(*pa)</code>表示数据的地址（等价于 &amp;a），所以<code>&amp;*pa</code>等价于 pa。</p><h5 id="对星号-的总结"><a href="#对星号-的总结" class="headerlink" title="对星号*的总结"></a>对星号<code>*</code>的总结</h5><ul><li>表示乘法，例如<code>int a = 3, b = 5, c;  c = a * b;</code></li><li>表示定义一个指针变量，以和普通变量区分开，例如<code>int a = 100;  int *p = &amp;a;</code>。</li><li>表示获取指针指向的数据，是一种间接操作，例如<code>int a, b, *p = &amp;a;  *p = 100;  b = *p;</code>。</li></ul><h3 id="3-2-指针变量续"><a href="#3-2-指针变量续" class="headerlink" title="3.2 指针变量续"></a>3.2 指针变量续</h3><p>编号（地址）：内存中每一个字节分配一个号码</p><p>定义一个变量 存放这个号码，这个变量就叫指针变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//取变量的地址 用&amp;</span><br>    <span class="hljs-comment">//&amp;num 代表变量num的起始地址</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#X\n&quot;</span>, &amp;num);<br><br>    <span class="hljs-comment">//需求：定义一个指针变量，保存num的地址</span><br>    <span class="hljs-comment">//在定义的时候：*说明p是指针变量 而不是普通变量</span><br>    <span class="hljs-keyword">int</span> *p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p));<br>    <br>    <span class="hljs-comment">//num的地址 与 p建立关系</span><br>    p = &amp;num;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>, num);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<span class="hljs-comment">//使用中：*p表示取p保存的地址编号 对应空间的内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %d\n&quot;</span>, p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;num = %d\n&quot;</span>, &amp;num);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/01/27/bAuUwf2YmVnhD93.png" alt="image-20210808094827650" style="zoom: 67%;" /> <h4 id="指针变量两种类型"><a href="#指针变量两种类型" class="headerlink" title="指针变量两种类型"></a>指针变量两种类型</h4><p>1.自身的类型</p><p>2.指向的类型</p><p><strong>指针变量指向类型的作用</strong>：决定了指针变量所取空间内容的宽度，决定了指针变量+1所跳过的单位跨度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> *p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//p自身的类型是 int *</span><br>    <span class="hljs-comment">//p指向的类型是 int</span><br>    p = &amp;num;<br>    <span class="hljs-comment">//指针变量指向类型的作用：决定了指针变量所取空间内容的宽度</span><br>    <span class="hljs-comment">//决定了指针变量+1所跳过的单位跨度</span><br><br>    <span class="hljs-comment">//指针变量的跨度</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;num = %u\n&quot;</span>, &amp;num);<span class="hljs-comment">//%u 无符号10进制整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %u\n&quot;</span>, p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p+1 = %u\n&quot;</span>, p+<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">char</span> *p1 = &amp;num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 = %u\n&quot;</span>, p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1+1 = %u\n&quot;</span>, p1+<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//num的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p1 = %d\n&quot;</span>, *p1);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="指针变量的运算"><a href="#指针变量的运算" class="headerlink" title="指针变量的运算"></a>指针变量的运算</h4><p>指针变量保存的是地址，而地址本质上是一个整数，所以指针变量可以进行部分运算，运算，例如加法、减法、比较等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span>    a = <span class="hljs-number">10</span>,   *pa = &amp;a, *paa = &amp;a;<br>    <span class="hljs-keyword">double</span> b = <span class="hljs-number">99.9</span>, *pb = &amp;b;<br>    <span class="hljs-keyword">char</span>   c = <span class="hljs-string">&#x27;@&#x27;</span>,  *pc = &amp;c;<br>    <span class="hljs-comment">//最初的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a=%#X, &amp;b=%#X, &amp;c=%#X\n&quot;</span>, &amp;a, &amp;b, &amp;c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pa=%#X, pb=%#X, pc=%#X\n&quot;</span>, pa, pb, pc);<br>    <span class="hljs-comment">//加法运算</span><br>    pa++; pb++; pc++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pa=%#X, pb=%#X, pc=%#X\n&quot;</span>, pa, pb, pc);<br>    <span class="hljs-comment">//减法运算</span><br>    pa -= <span class="hljs-number">2</span>; pb -= <span class="hljs-number">2</span>; pc -= <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pa=%#X, pb=%#X, pc=%#X\n&quot;</span>, pa, pb, pc);<br>    <span class="hljs-comment">//比较运算</span><br>    <span class="hljs-keyword">if</span>(pa == paa)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *paa);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *pa);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&amp;<span class="hljs-attribute">a</span>=0X61FEEC, &amp;<span class="hljs-attribute">b</span>=0X61FEE0, &amp;<span class="hljs-attribute">c</span>=0X61FEDF<br><span class="hljs-attribute">pa</span>=0X61FEEC, <span class="hljs-attribute">pb</span>=0X61FEE0, <span class="hljs-attribute">pc</span>=0X61FEDF<br><span class="hljs-attribute">pa</span>=0X61FEF0, <span class="hljs-attribute">pb</span>=0X61FEE8, <span class="hljs-attribute">pc</span>=0X61FEE0<br><span class="hljs-attribute">pa</span>=0X61FEE8, <span class="hljs-attribute">pb</span>=0X61FED8, <span class="hljs-attribute">pc</span>=0X61FEDE<br>6422400<br></code></pre></td></tr></table></figure><p>从运算结果可以看出：pa、pb、pc 每次加 1，它们的地址分别增加 4、8、1，正好是 int、double、char 类型的长度；减 2 时，地址分别减少 8、16、2，正好是 int、double、char 类型长度的 2 倍。</p><p><strong>指针变量加减运算的结果跟数据类型的长度有关，而不是简单地加 1 或减 1</strong></p><p>指针变量除了可以参与加减运算，还可以参与比较运算。当对指针变量进行比较运算时，比较的是指针变量本身的值，也就是数据的地址。如果地址相等，那么两个指针就指向同一份数据，否则就指向不同的数据。</p><p>上面的代码（第一个例子）在比较 pa 和 paa 的值时，pa 已经指向了 a 的上一份数据，所以它们不相等。而 a 的上一份数据又不知道是什么，所以会导致 printf() 输出一个没有意义的数。</p><p>另外需要说明的是，不能对指针变量进行乘法、除法、取余等其他运算，除了会发生语法错误，也没有实际的含义。</p><h4 id="指针变量深入"><a href="#指针变量深入" class="headerlink" title="指针变量深入"></a>指针变量深入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0x18283848</span>;<br>    <span class="hljs-keyword">int</span> *p1 = &amp;num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p1 = %#X\n&quot;</span>, *p1);<br><br>    <span class="hljs-keyword">short</span> *p2 = &amp;num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p2 = %#X\n&quot;</span>, *p2);<br><br>    <span class="hljs-keyword">char</span> *p3 = &amp;num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p3 = %#X\n&quot;</span>, *p3);<br><br>    <span class="hljs-comment">//如何得到1828</span><br>    <span class="hljs-keyword">short</span> *p4 = &amp;num;<br>    p4 = p4+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p4 = %#X\n&quot;</span>, *p4);<br><br>    <span class="hljs-comment">//如何得到2838</span><br>    <span class="hljs-keyword">char</span> *p5 = &amp;num;<br>    p5 = p5++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p5 = %#X\n&quot;</span>, *(<span class="hljs-keyword">short</span> *)p5);<span class="hljs-comment">//把p5指针转换为 short * 类型</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/27/Zq2inlTRPchzj6S.png" alt="image-20210808103236950"> </p><h2 id="4-数组指针"><a href="#4-数组指针" class="headerlink" title="4. 数组指针"></a>4. 数组指针</h2><p>数组（Array）是一系列具有相同类型的数据的集合，每一份数据叫做一个数组元素（<strong>Element</strong>）。数组中的所有元素在内存中是连续排列的，整个数组占用的是一块内存。</p><p>以<code>int arr[] = &#123; 99, 15, 100, 888, 252 &#125;;</code>为例，该数组在内存中的分布如下图所示：</p><p><img src="https://s2.loli.net/2022/01/27/ijfO6TgV3LQUDyR.jpg" alt="img"></p><p>定义数组时，要给出数组名和数组长度，数组名可以认为是一个指针称为数组的<strong>首地址</strong>。以上面的数组为例，下图是 arr 的指向：</p><p><img src="https://s2.loli.net/2022/01/27/6yS4GktPWQflzdK.jpg" alt="img"></p><h3 id="1）-用指针方式遍历数组元素"><a href="#1）-用指针方式遍历数组元素" class="headerlink" title="1） 用指针方式遍历数组元素"></a>1） 用指针方式遍历数组元素</h3><p>下面的例子演示了如何以指针的方式遍历数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);  <span class="hljs-comment">//求数组长度，整个数组所占用的字节数/一个数组元素所占用的字节数</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-comment">/*数组名arr指向数组的第0个元素，表示数组首地址,arr+i第 i 个元素，*(arr+i) 取第i个元素的数据，等价于arr[i]*/</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, *(arr+i) );  <span class="hljs-comment">//*(arr+i)等价于arr[i]</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>99 15 100 888 252</p><h3 id="2）-用数组指针遍历数组元素"><a href="#2）-用数组指针遍历数组元素" class="headerlink" title="2） 用数组指针遍历数组元素"></a>2） 用数组指针遍历数组元素</h3><p>我们也可以定义一个指向数组的指针，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br><span class="hljs-keyword">int</span> *p = arr; <span class="hljs-comment">//数组指针（一个指针指向了数组），p 指向的数组元素是 int 类型， p 的类型是int *</span><br></code></pre></td></tr></table></figure><p>arr 本身就是一个指针，可以直接赋值给指针变量 p。arr 是数组第 0 个元素的地址.</p><p>所以<code>int *p = arr;</code>也可以写作<code>int *p = &amp;arr[0];</code>。也就是说 <strong>arr、p、&amp;arr[0]</strong> 等价，它们都指向数组第 0 个元素，或者说指向数组的开头。</p><p><strong>数组指针指向的是数组中的一个具体元素，而不是整个数组</strong>，所以数组指针的类型和数组元素的类型有关</p><p>反过来想，p 并不知道它指向的是一个数组，p 只知道它指向的是一个整数，究竟如何使用 p 取决于程序员的编码。</p><p>更改上面的代码，使用<strong>数组指针</strong>来遍历数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br>    <span class="hljs-keyword">int</span> i, *p = arr, len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, *(p+i) );<span class="hljs-comment">//指针变量的加法，用 * 获取地址上的数据</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>p 只是一个指向 int 类型的指针，编译器并不知道它指向的到底是一个整数还是一系列整数（数组）</strong></p><p>更改上面的代码，让 p 指向数组中的第二个元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br>    <span class="hljs-keyword">int</span> *p = &amp;arr[<span class="hljs-number">2</span>];  <span class="hljs-comment">//也可以写作 int *p = arr + 2;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, *(p<span class="hljs-number">-2</span>), *(p<span class="hljs-number">-1</span>), *p, *(p+<span class="hljs-number">1</span>), *(p+<span class="hljs-number">2</span>) );<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>99, 15, 100, 888, 252</p><h3 id="3）-访问数组指针的两种方式"><a href="#3）-访问数组指针的两种方式" class="headerlink" title="3） 访问数组指针的两种方式"></a>3） 访问数组指针的两种方式</h3><p>引入数组指针后，我们就有两种方案来访问数组元素了，一种是使用下标，另外一种是使用指针。</p><p><strong>1) 使用下标</strong></p><p>也就是采用 <strong>arr[i]</strong> 的形式访问数组元素。如果 p 是指向数组 arr 的指针，那么也可以使用 <strong>p[i]</strong> 来访问数组元素，等价于 arr[i]。</p><p>比如下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br>    <span class="hljs-keyword">int</span> i, *p = arr, len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, p[i] );<span class="hljs-comment">//使用p[i]来访问数组元素,等价于 arr[i]</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2) 使用指针</strong></p><p>也就是使用 *(p+i) 的形式访问数组元素。另外数组名本身也是指针，也可以使用 *(arr+i) 来访问数组元素，它等价于 *(p+i)。</p><p>不管是数组名还是数组指针，都可以使用上面的两种方式来访问数组元素。不同的是，数组名是常量，它的值不能改变，而数组指针是变量（除非特别指明它是常量），它的值可以任意改变。也就是说，数组名只能指向数组的开头，而数组指针可以先指向数组开头，再指向其他元素。</p><p>更改上面的代码，借助自增运算符来遍历数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">15</span>, <span class="hljs-number">100</span>, <span class="hljs-number">888</span>, <span class="hljs-number">252</span> &#125;;<br>    <span class="hljs-keyword">int</span> i, *p = arr, len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, *p++);<span class="hljs-comment">//即 *(p++), 不能写成*arr++，因为arr是常量</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>99 15 100 888 252</p><h3 id="4）-关于数组指针的思考题"><a href="#4）-关于数组指针的思考题" class="headerlink" title="4） 关于数组指针的思考题"></a>4） 关于数组指针的思考题</h3><p>*<em>假设 p 是指向数组 arr 中第 n 个元素的指针，那么 <em>p++、</em>++p、(<em>p)++ 分别是什么意思呢？</em></em></p><p>*<strong>p++</strong> 等价于 *(p++)，表示先取得第 n 个元素的值，再将 p 指向下一个元素。</p><p>***++p** 等价于 *(++p)，会先进行 ++p 运算，使得 p 的值增加，指向下一个元素，整体上相当于 *(p+1)，所以会获得第 n+1 个数组元素的值。</p><p>**(<em>p)++</em>* 就非常简单了，会先取得第 n 个元素的值，再对该元素的值加 1。假设 p 指向第 0  个元素，并且第 0 个元素的值为 99，执行完该语句后，第 0  个元素的值就会变为 100。</p><h2 id="5-字符串指针"><a href="#5-字符串指针" class="headerlink" title="5. 字符串指针"></a>5. 字符串指针</h2><p>下面是字符数组的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">&quot;beijingren&quot;</span>;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str), i;<br>    <span class="hljs-comment">//直接输出字符串</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>    <span class="hljs-comment">//每次输出一个字符</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, str[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p>beijingren<br>b e i j i n g r e n</p><p>用<strong>指针</strong>的方式来输出字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">&quot;biancheng&quot;</span>;<br>    <span class="hljs-keyword">char</span> *pstr = str;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str), i;<br>    <span class="hljs-comment">//使用*(pstr+i)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, *(pstr+i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-comment">//使用pstr[i]</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, pstr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-comment">//使用*(str+i)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, *(str+i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p>biancheng<br>biancheng<br>biancheng</p><h2 id="6-指针变量作为函数参数"><a href="#6-指针变量作为函数参数" class="headerlink" title="6. 指针变量作为函数参数"></a>6. 指针变量作为函数参数</h2><p>交换两个变量的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;  <span class="hljs-comment">//临时变量</span><br>    temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">66</span>, b = <span class="hljs-number">99</span>;<br>    swap(a, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p>a = 66, b = 99</p><p>从结果可以看出，a、b 的值并没有发生改变，交换失败。这是因为 swap() 函数内部的 a、b 和 main() 函数内部的 a、b 是不同的变量，占用不同的内存，它们除了名字一样，没有其他任何关系，swap() 交换的是它内部 a、b 的值，不会影响它外部（main() 内部） a、b 的值。</p><p>改用指针变量作参数后就很容易解决上面的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;  <span class="hljs-comment">//临时变量</span><br>    temp = *p1;<br>    *p1 = *p2;<br>    *p2 = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">66</span>, b = <span class="hljs-number">99</span>;<br>    swap(&amp;a, &amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>a = 99, b = 66</p><p>调用 swap() 函数时，将变量 a、b 的地址分别赋值给 p1、p2，这样 <em>p1、</em>p2 代表的就是变量 a、b 本身，交换 <em>p1、</em>p2 的值也就是交换 a、b 的值。函数运行结束后虽然会将 p1、p2 销毁，但它对外部 a、b 造成的影响是“持久化”的，不会随着函数的结束而“恢复原样”。</p><p>需要注意的是临时变量 temp，它的作用特别重要，因为执行<code>*p1 = *p2;</code>语句后 a 的值会被 b 的值覆盖，如果不先将 a 的值保存起来以后就找不到了。</p><p>当然我们也可以使用C++的引用 &amp; ，来实现同样的效果，而且更简单一点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span></span>&#123;<span class="hljs-comment">//对参数的修改“带回来”</span><br>    <span class="hljs-keyword">int</span> temp;  <span class="hljs-comment">//临时变量</span><br>    temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">66</span>, b = <span class="hljs-number">99</span>;<br>    <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：a = 99, b = 66</p><p>&amp; 在C语言中是取地址符，这里指C++的引用，注意上面这段代码要在C++程序中才能运行，也就是.cpp文件</p><h2 id="7-用数组作为函数参数"><a href="#7-用数组作为函数参数" class="headerlink" title="7. 用数组作为函数参数"></a>7. 用数组作为函数参数</h2><p>数组是一系列数据的集合，无法通过参数将它们一次性传递到函数内部，如果希望在函数内部操作数组，必须传递数组指针。下面的例子定义了一个函数 max()，用来查找数组中值最大的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *intArr, <span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i, maxValue = intArr[<span class="hljs-number">0</span>];  <span class="hljs-comment">//假设第0个元素是最大值</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(maxValue &lt; intArr[i])&#123;<br>            maxValue = intArr[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> maxValue;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> nums[<span class="hljs-number">6</span>], i, maxval;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(nums)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>);<br>    <span class="hljs-comment">//读取用户输入的数据并赋值给数组元素</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, nums+i);<br>    &#125;<br>    maxval = max(nums, len);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Max value is %d!\n&quot;</span>, maxval);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：<br>输入6个元素：12 55 30 8 93 27<br>Max value is 93!</p><p>参数 intArr 仅仅是一个<strong>数组指针</strong>，在函数内部无法通过这个指针获得数组长度，必须将数组长度作为函数参数传递到函数内部。</p><p>数组 nums 的每个元素都是整数，scanf() 在读取用户输入的整数时，要求给出存储它的内存的地址，<code>nums+i</code>就是第 i 个数组元素的地址。</p><h2 id="8-指针作为函数的返回值"><a href="#8-指针作为函数的返回值" class="headerlink" title="8. 指针作为函数的返回值"></a>8. 指针作为函数的返回值</h2><p>C语言允许函数的返回值是一个<a href="http://c.biancheng.net/c/80/">指针</a>（地址），我们将这样的函数称为指针函数。下面的例子定义了一个函数 strlong()，用来返回两个字符串中较长的一个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">strlong</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str1, <span class="hljs-keyword">char</span> *str2)</span></span>&#123;<span class="hljs-comment">//用指针作为函数的返回值</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(str1) &gt;= <span class="hljs-built_in">strlen</span>(str2))&#123;<br>        <span class="hljs-keyword">return</span> str1;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> str2;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str1[<span class="hljs-number">30</span>], str2[<span class="hljs-number">30</span>], *str;<br>    gets(str1);<br>    gets(str2);<br>    str = strlong(str1, str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Longer string: %s\n&quot;</span>, str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-函数指针"><a href="#9-函数指针" class="headerlink" title="9. 函数指针"></a>9. 函数指针</h2><p>一个函数总是占用一段连续的内存区域，函数名在表达式中有时也会被转换为该函数所在内存区域的首地址，这和数组名非常类似。我们可以把函数的这个首地址（或称入口地址）赋予一个指针变量，使指针变量指向函数所在的内存区域，然后通过指针变量就可以找到并调用该函数。这种指针就是函数指针。</p><p><strong>函数指针的定义</strong>形式为：</p><p>**returnType (*pointerName)(param list)**;</p><p>returnType 为函数返回值类型，pointerName 为指针名称，param list 为函数参数列表。参数列表中可以同时给出参数的类型和名称，也可以只给出参数的类型，省略参数的名称，这一点和函数原型非常类似。</p><p>注意<code>( )</code>的优先级高于<code>*</code>，第一个括号不能省略，如果写作<code>returnType *pointerName(param list);</code>就成了函数原型，它表明函数的返回值类型为<code>returnType *</code>。</p><p>【实例】用指针来实现对函数的调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//返回两个数中较大的一个</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<span class="hljs-comment">//三目运算符</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x, y, maxval;<br>    <span class="hljs-comment">//定义函数指针</span><br>    <span class="hljs-keyword">int</span> (*pmax)(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) = max;  <span class="hljs-comment">//也可以写作int (*pmax)(int, int)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input two numbers:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    maxval = (*pmax)(x, y);<span class="hljs-comment">//第14行</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Max value: %d\n&quot;</span>, maxval);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>Input two numbers:10 50<br>Max value: 50</p><p>第 14 行代码对函数进行了调用。pmax 是一个函数指针，在前面加 * 就表示对它指向的函数进行调用。注意<code>( )</code>的优先级高于<code>*</code>，第一个括号不能省略。</p><h2 id="10-对C语言指针的总结"><a href="#10-对C语言指针的总结" class="headerlink" title="10. 对C语言指针的总结:"></a>10. 对C语言指针的总结:</h2><p>指针（Pointer）就是内存的地址，C语言允许用一个变量来存放指针，这种变量称为指针变量。指针变量可以存放基本类型数据的地址，也可以存放数组、函数以及其他指针变量的地址。</p><p>程序在运行过程中需要的是数据和指令的地址，变量名、函数名、字符串名和数组名在本质上是一样的，它们都是地址的助记符：在编写代码的过程中，我们认为函数名、字符串名和数组名表示的是代码块或数据块的首地址；程序被编译和链接后，这些名字都会消失，取而代之的是它们对应的地址。</p><p>在我们目前所学到的语法中，星号<code>*</code>主要有三种用途：</p><ul><li>表示乘法，例如<code>int a = 3, b = 5, c;  c = a * b;</code>，这是最容易理解的。</li><li>表示定义一个指针变量，以和普通变量区分开，例如<code>int a = 100;  int *p = &amp;a;</code>。</li><li>表示获取指针指向的数据，是一种间接操作，例如<code>int a, b, *p = &amp;a;  *p = 100;  b = *p;</code></li></ul><ol><li><p>指针变量可以进行<strong>加减运算</strong>，例如<code>p++</code>、<code>p+i</code>、<code>p-=i</code>。指针变量的加减运算并不是简单的加上或减去一个整数，而是跟指针指向的<strong>数据类型有关</strong>。</p></li><li><p>给指针变量赋值时，要将一份数据的<strong>地址</strong>赋给它，不能直接赋给一个整数，例如<code>int *p = 1000;</code>是没有意义的，使用过程中一般会导致程序崩溃。</p></li><li><p>使用指针变量之前一定要<strong>初始化</strong>，否则就不能确定指针指向哪里，如果它指向的内存没有使用权限，程序就崩溃了。对于暂时没有指向的指针，<strong>建议赋值</strong><code>NULL</code>。</p></li><li><p>两个指针变量可以相减。如果两个指针变量指向同一个数组中的某个元素，那么相减的结果就是两个指针之间相差的元素个数。</p></li><li><p>数组也是有类型的，数组名的本意是表示一组类型相同的数据。在定义数组时，或者和 sizeof、&amp; 运算符一起使用时数组名才表示整个数组，表达式中的<strong>数组名会被转换为一个指向数组的指针</strong>。</p></li></ol><h1 id="四、结构体"><a href="#四、结构体" class="headerlink" title="四、结构体"></a>四、结构体</h1><h2 id="1-C语言结构体"><a href="#1-C语言结构体" class="headerlink" title="1. C语言结构体"></a>1. C语言结构体</h2><p>C语言结构体（Struct）从本质上讲是一种自定义的数据类型，只不过这种数据类型比较复杂，是由 int、char、float 等基本类型组成的。你可以认为结构体是一种聚合类型。</p><p>在实际开发中，我们可以将一组类型不同的、但是用来描述同一件事物的变量放到结构体中。例如，在校学生有姓名、年龄、身高、成绩等属性，学了结构体后，我们就不需要再定义多个变量了，将它们都放到结构体中即可。</p><p>在C语言中，可以使用<strong>结构体（Struct）</strong>来存放一组不同类型的数据。结构体的定义形式为：</p><p>struct 结构体名{<br>  结构体所包含的变量或数组<br>};</p><p>结构体是一种集合，它里面包含了多个变量或数组，它们的类型可以相同，也可以不同，每个这样的变量或数组都称为结构体的成员（Member）。请看下面的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在学习小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>stu 为结构体名，它包含了 5 个成员，分别是 name、num、age、group、score。结构体成员的定义方式与变量和数组的定义方式相同，只是不能初始化。</p><blockquote><p>注意大括号后面的分号<code>;</code>不能少，这是一条完整的语句。</p></blockquote><p>结构体也是一种数据类型，它由程序员自己定义，可以包含多个其他类型的数据。</p><p>像 int、float、char 等是由C语言本身提供的数据类型，不能再进行分拆，我们称之为基本数据类型；而结构体可以包含多个基本类型的数据，也可以包含其他的结构体，我们将它称为复杂数据类型或构造数据类型。</p><h2 id="2-结构体变量"><a href="#2-结构体变量" class="headerlink" title="2. 结构体变量"></a>2. 结构体变量</h2><p>既然结构体是一种数据类型，那么就可以用它来定义变量。例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">struct</span> stu stu<span class="hljs-number">1</span>, stu<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>定义了两个变量 stu1 和 stu2，它们都是 stu 类型，都由 5 个成员组成。注意关键字<code>struct</code>不能少。</p><p>stu 就像一个“模板”，定义出来的变量都具有相同的性质。也可以将结构体比作“图纸”，将结构体变量比作“零件”，根据同一张图纸生产出来的零件的特性都是一样的。</p><p>你也可以在定义结构体的同时定义结构体变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在学习小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125; stu1, stu2;<br></code></pre></td></tr></table></figure><p>将变量放在结构体定义的最后即可。</p><p>如果只需要 stu1、stu2 两个变量，后面不需要再使用结构体名定义其他变量，那么在定义时也可以不给出结构体名，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>  <span class="hljs-comment">//没有写 stu</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在学习小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125; stu1, stu2;<br></code></pre></td></tr></table></figure><p>这样做书写简单，但是因为没有结构体名，后面就没法用该结构体定义新的变量。</p><p>理论上讲结构体的各个成员在内存中是连续存储的，和数组非常类似，例如上面的结构体变量 stu1、stu2 的内存分布如下图所示，共占用 4+4+4+1+4 = 17 个字节。</p><p><img src="https://s2.loli.net/2022/01/27/OwHf2aYWNdvsDAX.jpg" alt="img"></p><p>但是在编译器的具体实现中，各个成员之间可能会存在缝隙，对于 stu1、stu2，成员变量 group 和 score 之间就存在 3 个字节的空白填充（见下图）。这样算来，stu1、stu2 其实占用了 17 + 3 = 20 个字节。</p><p><img src="https://s2.loli.net/2022/01/27/wpgbDIemTCq7ns1.jpg" alt="img"></p><h2 id="3-成员的获取和赋值"><a href="#3-成员的获取和赋值" class="headerlink" title="3. 成员的获取和赋值"></a>3. 成员的获取和赋值</h2><p>结构体和数组类似，也是一组数据的集合，整体使用没有太大的意义。数组使用下标<code>[ ]</code>获取单个元素，结构体使用点号<code>.</code>获取单个成员。获取结构体成员的一般格式为：</p><p>结构体变量名.成员名;</p><p>通过这种方式可以获取成员的值，也可以给成员赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>        <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>        <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>        <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>        <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>        <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>    &#125; stu1;<br>    <span class="hljs-comment">//给结构体成员赋值</span><br>    stu1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>    stu1.num = <span class="hljs-number">12</span>;<br>    stu1.age = <span class="hljs-number">18</span>;<br>    stu1.group = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    stu1.score = <span class="hljs-number">136.5</span>;<br>    <span class="hljs-comment">//读取结构体成员的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n&quot;</span>, stu1.name, stu1.num, stu1.age, stu1.group, stu1.score);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！</p><p>除了可以对成员进行逐一赋值，也可以在定义时整体赋值，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125; stu1, stu2 = &#123; <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">136.5</span> &#125;;<br></code></pre></td></tr></table></figure><p>不过整体赋值仅限于定义结构体变量的时候，在使用过程中只能对成员逐一赋值，这和数组的赋值非常类似。</p><p><strong>需要注意的是，结构体是一种自定义的数据类型，是创建变量的模板，不占用内存空间；</strong></p><p><strong>结构体变量才包含了实实在在的数据，需要内存空间来存储。</strong></p><h2 id="4-结构体指针（指向结构体的指针）"><a href="#4-结构体指针（指向结构体的指针）" class="headerlink" title="4.结构体指针（指向结构体的指针）"></a>4.结构体指针（指向结构体的指针）</h2><h3 id="4-1-结构体指针"><a href="#4-1-结构体指针" class="headerlink" title="4.1 结构体指针"></a>4.1 结构体指针</h3><p>当一个指针变量指向结构体时，我们就称它为结构体指针，C语言结构体指针的定义形式一般为：</p><p>struct 结构体名 *变量名;</p><p>定义结构体指针的实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125; stu1 = &#123; <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">136.5</span> &#125;;<br><br><span class="hljs-comment">//结构体指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">pstu</span> =</span> &amp;stu1;<br></code></pre></td></tr></table></figure><p>也可以在定义结构体的同时定义结构体指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125; stu1 = &#123; <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">136.5</span> &#125;, *pstu = &amp;stu1;<br></code></pre></td></tr></table></figure><p>注意，结构体变量名和数组名不同，<strong>数组名</strong>在表达式中<strong>会被转换为数组指针</strong>，而<strong>结构体变量名不会转换为指针</strong>，无论在任何表达式中它表示的都是整个集合本身，要想取得结构体变量的地址，必须在前面加<code>&amp;</code>，所以给 pstu 赋值只能写作：</p><p>struct stu *pstu = &stu1;</p><p>而不能写作：</p><p>struct stu *pstu = stu1;</p><p>还应该注意，结构体和结构体变量是两个不同的概念：结构体是一种数据类型，是一种创建变量的模板，编译器不会为它分配内存空间，就像 int、float、char 这些关键字本身不占用内存一样；<strong>结构体变量才包含实实在在的数据</strong>，才需要内存来存储。下面的写法是错误的，不可能去取一个结构体名的地址，也不能将它赋值给其他变量：</p><p>struct stu *pstu = &stu;<br>struct stu *pstu = stu;</p><h3 id="4-2-获取结构体成员"><a href="#4-2-获取结构体成员" class="headerlink" title="4.2 获取结构体成员"></a>4.2 获取结构体成员</h3><p>通过结构体指针可以获取结构体成员，一般形式为：</p><p>(*pointer).memberName</p><p>或者：</p><p><strong>pointer-&gt;memberName</strong></p><p>第一种写法中，<code>.</code>的优先级高于<code>*</code>，<code>(*pointer)</code>两边的括号不能少。如果去掉括号写作<code>*pointer.memberName</code>，那么就等效于<code>*(pointer.memberName)</code>，这样意义就完全不对了。</p><p>第二种写法中，**<code>-&gt;</code>是一个新的运算符，习惯称它为“箭头”**，有了它，可以通过结构体指针直接取得结构体成员；</p><p>这也是**<code>-&gt;</code>在C语言中的唯一用途**。</p><p>上面的两种写法是等效的，我们通常采用后面的写法，这样更加直观。</p><p>【示例】结构体指针的使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>        <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>        <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>        <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>        <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>        <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>    &#125; stu1 = &#123; <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">136.5</span> &#125;, *pstu = &amp;stu1;<br>    <br>    <span class="hljs-comment">//读取结构体成员的值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n&quot;</span>, (*pstu).name, (*pstu).num, (*pstu).age, (*pstu).group, (*pstu).score);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n&quot;</span>, pstu-&gt;name, pstu-&gt;num, pstu-&gt;age, pstu-&gt;group, pstu-&gt;score);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！<br>Tom的学号是12，年龄是18，在A组，今年的成绩是136.5！</p><p>【示例】结构体数组指针的使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125;stus[] = &#123;<br>    &#123;<span class="hljs-string">&quot;Zhou ping&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">145.0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Zhang ping&quot;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">130.5</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Liu fang&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">148.5</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Cheng ling&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">139.0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Wang ming&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">144.5</span>&#125;<br>&#125;, *ps;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//求数组长度</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(stus) / <span class="hljs-keyword">sizeof</span>(struct stu);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name\t\tNum\tAge\tGroup\tScore\t\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(ps=stus; ps&lt;stus+len; ps++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\t%d\t%d\t%c\t%.1f\n&quot;</span>, ps-&gt;name, ps-&gt;num, ps-&gt;age, ps-&gt;group, ps-&gt;score);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Name</span>            Num     Age     Group   Score<br><span class="hljs-attribute">Zhou</span> ping       <span class="hljs-number">5</span>       <span class="hljs-number">18</span>      C       <span class="hljs-number">145</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Zhang</span> ping      <span class="hljs-number">4</span>       <span class="hljs-number">19</span>      A       <span class="hljs-number">130</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">Liu</span> fang        <span class="hljs-number">1</span>       <span class="hljs-number">18</span>      A       <span class="hljs-number">148</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">Cheng</span> ling      <span class="hljs-number">2</span>       <span class="hljs-number">17</span>      F       <span class="hljs-number">139</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Wang</span> ming       <span class="hljs-number">3</span>       <span class="hljs-number">17</span>      B       <span class="hljs-number">144</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="4-3-结构体指针作为函数参数"><a href="#4-3-结构体指针作为函数参数" class="headerlink" title="4.3 结构体指针作为函数参数"></a>4.3 结构体指针作为函数参数</h3><p>结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。</p><p>【示例】计算全班学生的总成绩、平均成绩和以及 140 分以下的人数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-keyword">char</span> *name;  <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//学号</span><br>    <span class="hljs-keyword">int</span> age;  <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">char</span> group;  <span class="hljs-comment">//所在小组</span><br>    <span class="hljs-keyword">float</span> score;  <span class="hljs-comment">//成绩</span><br>&#125;stus[] = &#123;<br>    &#123;<span class="hljs-string">&quot;Li ping&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">145.0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Zhang ping&quot;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">130.5</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;He fang&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">148.5</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Cheng ling&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">139.0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Wang ming&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">144.5</span>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">average</span><span class="hljs-params">(struct stu *ps, <span class="hljs-keyword">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-keyword">sizeof</span>(stus) / <span class="hljs-keyword">sizeof</span>(struct stu);<br>    average(stus, len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">average</span><span class="hljs-params">(struct stu *ps, <span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i, num_140 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> average, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        sum += (ps + i) -&gt; score;<br>        <span class="hljs-keyword">if</span>((ps + i)-&gt;score &lt; <span class="hljs-number">140</span>) num_140++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum=%.2f\naverage=%.2f\nnum_140=%d\n&quot;</span>, sum, sum/<span class="hljs-number">5</span>, num_140);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>sum=707.50<br>average=141.50<br>num_140=2</p><h3 id="4-4-结构体讲解版本2"><a href="#4-4-结构体讲解版本2" class="headerlink" title="4.4 结构体讲解版本2"></a>4.4 结构体讲解版本2</h3><p>可以声明一个指向结构类型对象的指针。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyStruct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> a;<br><span class="hljs-keyword">int</span> b;<br><span class="hljs-keyword">int</span> c;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyStruct</span> <span class="hljs-title">ss</span>=</span>&#123;<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;;<br><span class="hljs-comment">//声明了结构对象 ss，并把 ss 的成员初始化为 20，30 和 40。</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyStruct</span> *<span class="hljs-title">ptr</span>=</span>&amp;ss;<br><span class="hljs-comment">//声明了一个指向结构对象 ss 的指针。它的类型是MyStruct *,它指向的类型是 MyStruct。</span><br><br><span class="hljs-keyword">int</span> *pstr=(<span class="hljs-keyword">int</span>*)&amp;ss;<br><span class="hljs-comment">//声明了一个指向结构对象 ss 的指针。但是 pstr 和它被指向的类型 ptr 是不同的。</span><br></code></pre></td></tr></table></figure><p>请问怎样通过指针 ptr 来访问 ss 的三个成员变量？<br>答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">ptr-&gt;a;<br><span class="hljs-comment">//指向运算符，或者可以这们(*ptr).a,建议使用前者</span><br>ptr-&gt;b;<br>ptr-&gt;c;<br></code></pre></td></tr></table></figure><p>又请问怎样通过指针 pstr 来访问 ss 的三个成员变量？<br>答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">*pstr；<br><span class="hljs-comment">//访问了 ss 的成员 a。</span><br>*(pstr+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//访问了 ss 的成员 b。</span><br>*(pstr+<span class="hljs-number">2</span>)<br><span class="hljs-comment">//访问了 ss 的成员 c。</span><br></code></pre></td></tr></table></figure><p>虽然在编译器上调试过上述代码，但是要知道，这样使用 pstr 来访问结构成员是不正规的。</p><h3 id="指针与函数的关系"><a href="#指针与函数的关系" class="headerlink" title="指针与函数的关系"></a>指针与函数的关系</h3><p>可以把一个指针声明成为一个指向函数的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-keyword">int</span> (*pfun1)(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">int</span>);<br>pfun1 = fun1;<br><span class="hljs-keyword">int</span> a = (*pfun1)(<span class="hljs-string">&quot;abcdefg&quot;</span>,<span class="hljs-number">7</span>);<span class="hljs-comment">//通过函数指针调用函数。</span><br></code></pre></td></tr></table></figure><p>可以把指针作为函数的形参。在函数调用语句中，可以用指针表达式来作为实参。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *)</span></span>;<br><span class="hljs-keyword">int</span> a;<br><span class="hljs-keyword">char</span> str[]=<span class="hljs-string">&quot;abcdefghijklmn&quot;</span>;<br>a = fun(str);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span>&#123;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;;)<br>&#123;<br>num += *s;<br>        s++;<br>&#125;<br><span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中的函数fun统计一个字符串中各个字符的ASCII码值之和。</p><p>数组的名字也是一个指针。在函数调用中，当把 str作为实参传递给形参 s 后，实际是把 str 的值传递给了 s，s 所指向的地址就和 str 所指向的地址一致</p><p>但是 str 和 s 各自占用各自的存储空间。在函数体内对 s 进行自加 1 运算，并不意味着同时对 str 进行了自加 1 运算。</p><h1 id="五、C语言typedef的用法"><a href="#五、C语言typedef的用法" class="headerlink" title="五、C语言typedef的用法"></a>五、C语言typedef的用法</h1><p><strong>typedef</strong>：C语言允许为一个数据类型起一个新的<strong>别名</strong>，就像给人起“绰号”一样。起别名的目的不是为了提高程序运行效率，而是为了编码方便。</p><p>一个结构体的名字是 stu，要想定义一个结构体变量就得这样写：</p><p>struct stu stu1;</p><p>struct 看起来就是多余的，但不写又会报错。如果为 struct stu 起了一个别名 STU，书写起来就简单了：</p><p>STU stu1;</p><p>使用关键字 <strong>typedef</strong> 可以为类型起一个新的别名。typedef 的用法一般为：</p><p><strong>typedef  oldName  newName</strong>;</p><p>oldName 是类型原来的名字，newName 是类型新的名字。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> INTEGER;<br>INTEGER a, b; <span class="hljs-comment">//等效于int a, b;</span><br>a = <span class="hljs-number">1</span>;<br>b = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> * PTR_INT<br>PTR_INT p1, p2;<span class="hljs-comment">//p1、p2 类型相同，它们都是指向 int 类型的指针。</span><br></code></pre></td></tr></table></figure><p>typedef的最常用的作用就是给结构体变量重命名:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">INFO</span></span><br><span class="hljs-class">&#123;</span><br>        <span class="hljs-keyword">int</span> num; <br>        <span class="hljs-keyword">char</span> str[<span class="hljs-number">256</span>];<br>&#125;INFO;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">INFO</span> <span class="hljs-title">A</span>;</span><br>        INFO B;    <span class="hljs-comment">//通过typedef重命名后的名字INFO与struct _INFO完全等价！</span><br>        A.num = <span class="hljs-number">2014</span>;<br>        <span class="hljs-built_in">strcpy</span>(A.str,<span class="hljs-string">&quot;Welcome to beijing&quot;</span>);<br>        B=A;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This year is %d %s\n&quot;</span>,A.num,A.str);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This year is %d %s\n&quot;</span>,B.num,B.str);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到typedef可以为关键词改名，使改名之后的INFO类型等价于struct _INFO类型，让我们在定义这种结构类型时更方便、省事。</p><h1 id="六、内存操作函数"><a href="#六、内存操作函数" class="headerlink" title="六、内存操作函数"></a>六、内存操作函数</h1><p>在 C 语言中，程序中 malloc 等内存分配函数的使用次数一定要和 free 相等，并一一配对使用。绝对要避免“malloc 两次 free 一次”或者“malloc 一次 free 两次”等情况。</p><p><strong>在 free 之后必须为指针赋一个新值</strong></p><p>在使用指针进行动态内存分配操作时，在指针 p 被 free 释放之后，指针变量本身并没有被删除。如果这时候没有将指针 p 置为 NULL，会让人误以为 p 是个合法的指针而在以后的程序中错误使用它。</p><p><strong>“free(p)”释放的是指针变量 p 所指向的内存，而不是指针变量 p 本身。指针变量 p 并没有被释放，仍然指向原来的存储空间。</strong></p><p>其实，指针只是一个变量，只有程序结束时才被销毁。释放内存空间后，原来指向这块空间的指针还是存在的，只不过现在指针指向的这块内存是不合法的。因此，在释放内存后，必须把指针指向 NULL，以防止指针在后面不小心又被解引用了。</p><h1 id="七、C-引用-amp"><a href="#七、C-引用-amp" class="headerlink" title="七、C++引用 &amp;"></a>七、C++引用 &amp;</h1><h3 id="C-参数传值"><a href="#C-参数传值" class="headerlink" title="C++ 参数传值"></a>C++ 参数传值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-comment">//以下三行将a、b值互换</span><br>    tmp = a;<br>    a = b;<br>    b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>, b = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">Swap</span>(a, b);<br>    cout &lt;&lt; <span class="hljs-string">&quot;After swaping: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是一段C++ 的语法，运行结果为：<br>After swaping: a = 4 b = 5</p><p>对C++语法不熟悉的话，可以看下面C语言的语法，是一样的效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp = a;<br>    a = b;<br>    b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>, b = <span class="hljs-number">5</span>;<br>    swap(a, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后：a = %d, b = %d\n&quot;</span>, a, b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码运行结果为：<br>后：a = 4, b = 5</p><h3 id="C-参数传引用-amp-对参数的修改结果带回来"><a href="#C-参数传引用-amp-对参数的修改结果带回来" class="headerlink" title="C++参数传引用 &amp;  对参数的修改结果带回来"></a>C++参数传引用 &amp;  对参数的修改结果带回来</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp; a, <span class="hljs-keyword">int</span> &amp; b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//交换a、b的值</span><br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp = a; a = b; b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n1 = <span class="hljs-number">100</span>, n2 = <span class="hljs-number">50</span>;<br>    <span class="hljs-built_in">Swap</span>(n1, n2);  <span class="hljs-comment">//n1、n2 的值被交换</span><br>    cout &lt;&lt; n1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; n2 &lt;&lt; endl;  <span class="hljs-comment">//输出 50 100</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为C++是兼容C语言，所以可以写下面的代码，在C语言中使用C++ 的引用，也就是在变量前加&amp;，但是必须在（.cpp)也就是C++文件中运行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//交换a、b的值</span><br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp = a; <br>    a = b; <br>    b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n1 = <span class="hljs-number">100</span>, n2 = <span class="hljs-number">50</span>;<br>    swap(n1, n2);  <span class="hljs-comment">//n1、n2 的值被交换</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n1=%d, n2= %d\n&quot;</span>, n1, n2);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：n1=50, n2= 100</p><p>可以看到结果，使用引用&amp;后，对参数的修改可以带回来</p><p>当然C语言也可以用指针来实现，但是不太方便，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//交换a、b的值</span><br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp = *a; <br>    *a = *b; <br>    *b = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n1 = <span class="hljs-number">100</span>, n2 = <span class="hljs-number">50</span>;<br>    swap(&amp;n1, &amp;n2);  <span class="hljs-comment">//这里&amp;是指取地址符</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n1=%d, n2= %d\n&quot;</span>, n1, n2);<br>&#125;<br></code></pre></td></tr></table></figure><p>对C++引用了解到这里即可，下面的介绍还涉及到C++的语法</p><h3 id="C-引用"><a href="#C-引用" class="headerlink" title="C++引用"></a>C++引用</h3><p>引用是 C++ 的新增内容，在实际开发中会经常使用；C++ 用的引用就如同C语言的指针一样重要，但它比指针更加方便和易用，有时候甚至是不可或缺的。</p><p>同指针一样，引用能够减少数据的拷贝，提高数据的传递效率。</p><p>引用的定义方式类似于指针，只是用<code>&amp;</code>取代了<code>*</code>，语法格式为：</p><p>type &amp;name = data;</p><p>type 是被引用的数据的类型，name 是引用的名称，data 是被引用的数据。引用必须在定义的同时初始化，并且以后也要从一而终，不能再引用其它数据，这有点类似于常量（const 变量）。</p><p>下面是一个演示引用的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">int</span> &amp;r = a;<br>    cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; r &lt;&lt; endl;<br>    cout &lt;&lt; &amp;a &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; &amp;r &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>99, 99<br>0x28ff44, 0x28ff44</p><p>本例中，变量 r 就是变量 a 的引用，它们用来指代同一份数据；也可以说变量 r 是变量 a 的另一个名字。从输出结果可以看出，a 和 r 的地址一样，都是<code>0x28ff44</code>；或者说地址为<code>0x28ff44</code>的内存有两个名字，a 和 r，想要访问该内存上的数据时，使用哪个名字都行。</p><p>注意，引用在定义时需要添加<code>&amp;</code>，在使用时不能添加<code>&amp;</code>，使用时添加<code>&amp;</code>表示取地址。如上面代码所示，第 6 行中的<code>&amp;</code>表示引用，第 8 行中的<code>&amp;</code>表示取地址。除了这两种用法，<code>&amp;</code>还可以表示位运算中的与运算。</p><p>由于引用 r 和原始变量 a 都是指向同一地址，所以通过引用也可以修改原始变量中所存储的数据，请看下面的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">int</span> &amp;r = a;<br>    r = <span class="hljs-number">47</span>;<br>    cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; r &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>47, 47</p><p>最终程序输出两个 47，可见原始变量 a 的值已经被引用变量 r 所修改。</p><p>如果读者不希望通过引用来修改原始的数据，那么可以在定义时添加 const 限制，形式为：</p><p>const type &amp;name = value;</p><p>也可以是：</p><p>type const &amp;name = value;</p><p>这种引用方式为常引用</p><h3 id="C-引用作为函数参数"><a href="#C-引用作为函数参数" class="headerlink" title="C++引用作为函数参数"></a>C++引用作为函数参数</h3><p>在定义或声明函数时，我们可以将函数的形参指定为引用的形式，这样在调用函数时就会将实参和形参绑定在一起，让它们都指代同一份数据。如此一来，如果在函数体中修改了形参的数据，那么实参的数据也会被修改，从而拥有“在函数内部影响函数外部数据”的效果。</p><p>至于实参和形参是如何绑定的，我们将在下节中讲解，届时我们会一针见血地阐明引用的本质。</p><p>一个能够展现按引用传参的优势的例子就是交换两个数的值，请看下面的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;r1, <span class="hljs-keyword">int</span> &amp;r2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> num1, num2;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Input two integers: &quot;</span>;<br>    cin &gt;&gt; num1 &gt;&gt; num2;<br>    <span class="hljs-built_in">swap1</span>(num1, num2);<br>    cout &lt;&lt; num1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Input two integers: &quot;</span>;<br>    cin &gt;&gt; num1 &gt;&gt; num2;<br>    <span class="hljs-built_in">swap2</span>(&amp;num1, &amp;num2);<br>    cout &lt;&lt; num1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Input two integers: &quot;</span>;<br>    cin &gt;&gt; num1 &gt;&gt; num2;<br>    <span class="hljs-built_in">swap3</span>(num1, num2);<br>    cout &lt;&lt; num1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//直接传递参数内容</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><span class="hljs-comment">//传递指针</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = *p1;<br>    *p1 = *p2;<br>    *p2 = temp;<br>&#125;<br><span class="hljs-comment">//按引用传参</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;r1, <span class="hljs-keyword">int</span> &amp;r2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = r1;<br>    r1 = r2;<br>    r2 = temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br>Input two integers: 12 34↙<br>12 34<br>Input two integers: 88 99↙<br>99 88<br>Input two integers: 100 200↙<br>200 100</p><p>本例演示了三种交换变量的值的方法：</p><ol><li><p>swap1() 直接传递参数的内容，不能达到交换两个数的值的目的。对于 swap1() 来说，a、b 是形参，是作用范围仅限于函数内部的局部变量，它们有自己独立的内存，和 num1、num2 指代的数据不一样。调用函数时分别将 num1、num2 的值传递给 a、b，此后 num1、num2 和 a、b 再无任何关系，在 swap1() 内部修改 a、b 的值不会影响函数外部的 num1、num2，更不会改变 num1、num2 的值。</p></li><li><p>swap2() 传递的是指针，能够达到交换两个数的值的目的。调用函数时，分别将 num1、num2 的指针传递给 p1、p2，此后 p1、p2 指向 a、b 所代表的数据，在函数内部可以通过指针间接地修改 a、b 的值。</p></li><li><p>swap3() 是按引用传递，能够达到交换两个数的值的目的。调用函数时，分别将 r1、r2 绑定到 num1、num2 所指代的数据，此后 r1 和 num1、r2 和 num2 就都代表同一份数据了，通过 r1 修改数据后会影响 num1，通过 r2 修改数据后也会影响 num2。</p></li></ol><p>从以上代码的编写中可以发现，按引用传参在使用形式上比指针更加直观。在以后的 C++ 编程中，我鼓励读者大量使用引用，它一般可以代替指针（当然指针在C++中也不可或缺），C++ 标准库也是这样做的。</p>]]></content>
    
    
    <categories>
      
      <category>专业课</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>专业课</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm使用秘籍</title>
    <link href="/2022/01/25/%E7%AC%94%E8%AE%B0/PyCharm%E4%BD%BF%E7%94%A8%E7%A7%98%E7%B1%8D/"/>
    <url>/2022/01/25/%E7%AC%94%E8%AE%B0/PyCharm%E4%BD%BF%E7%94%A8%E7%A7%98%E7%B1%8D/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="在Pycharm下为你的Python项目配置Python解释器"><a href="#在Pycharm下为你的Python项目配置Python解释器" class="headerlink" title="在Pycharm下为你的Python项目配置Python解释器"></a>在Pycharm下为你的Python项目配置Python解释器</h2><ol><li>File&gt;Settings&gt;Project:当前项目名&gt;Project Interpreter&gt;add Local</li></ol><h2 id="在Pycharm下创建Python文件、Python模块"><a href="#在Pycharm下创建Python文件、Python模块" class="headerlink" title="在Pycharm下创建Python文件、Python模块"></a>在Pycharm下创建Python文件、Python模块</h2><ol><li>File&gt;New&gt;Python File</li><li>File&gt;New&gt;Python Package</li></ol><h2 id="使用Pycharm安装Python第三方模块"><a href="#使用Pycharm安装Python第三方模块" class="headerlink" title="使用Pycharm安装Python第三方模块"></a>使用Pycharm安装Python第三方模块</h2><ol><li>File&gt;Settings&gt;Project:当前项目名&gt;Project Interpreter&gt;点击右侧绿色小加号</li></ol><h2 id="Pycharm基本设置，例如不使用tab、tab-4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。"><a href="#Pycharm基本设置，例如不使用tab、tab-4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。" class="headerlink" title="Pycharm基本设置，例如不使用tab、tab=4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。"></a>Pycharm基本设置，例如不使用tab、tab=4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。</h2><ol><li>不使用tab、tab=4空格：Editor&gt;Code Style&gt;Python</li><li>字体、字体颜色：Edit&gt;Colors &amp; Fonts&gt;Python</li><li>关闭自动更新：Appearance &amp; Behavior&gt;System Settings&gt;Updates</li><li>脚本头设置：Edit&gt;File and Code Templates&gt;Python Script 注：其他类似</li><li>显示行号：Edit&gt;General&gt;Appearance&gt;Show line numbers 注：2016.2默认显示行号</li><li>右侧竖线是PEP8的代码规范，提示一行不要超过120个字符</li><li>导出、导入你自定义的配置： File&gt;Export Settings、Import Settings</li></ol><h2 id="常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。"><a href="#常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。" class="headerlink" title="常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。"></a>常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。</h2><ol><li>Ctrl + D：复制当前行</li><li>Ctrl + E：删除当前行</li><li>Shift + Enter：快速换行</li><li>Ctrl + /：快速注释（选中多行后可以批量注释）</li><li>Tab：缩进当前行（选中多行后可以批量缩进）</li><li>Shift + Tab：取消缩进（选中多行后可以批量取消缩进）</li><li>Ctrl + F：查找</li><li>Ctrl + H：替换</li></ol><h2 id="Pycharm安装插件，例如Markdown-support、数据库支持插件等。"><a href="#Pycharm安装插件，例如Markdown-support、数据库支持插件等。" class="headerlink" title="Pycharm安装插件，例如Markdown support、数据库支持插件等。"></a>Pycharm安装插件，例如Markdown support、数据库支持插件等。</h2><ol><li>Plugins&gt;Browse repositories（下方三个按钮中间那个）&gt;搜索‘markdown support’&gt;install</li><li>右上角View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览</li></ol><h2 id="Git配置？"><a href="#Git配置？" class="headerlink" title="Git配置？"></a>Git配置？</h2><ol><li>需要本地安装好Git</li><li>Version Control&gt;Git</li><li>配置了Git等版本控制系统之后，可以很方便的diff查看文件的不用</li></ol><h2 id="常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。"><a href="#常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。" class="headerlink" title="常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。"></a>常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。</h2><ol><li>复制文件路径：左侧文件列表右键选中的文件&gt;Copy Path</li><li>在文件管理器中打开：右键选中的文件&gt;往下找到Show In Explorer</li><li>快速定位：Ctrl + 某些内建模块之后，点击在源文件中展开</li><li>查看结构：IDE左侧边栏Structure 查看当前项目的结构</li><li>tab批量换space：Edit&gt;Convert Indents</li><li>TODO的使用：# TODO 要记录的事情</li><li>Debug设置断点，直接点击行号与代码之间的空白处即可设置断点</li><li>Tab页上右键&gt;Move Right（Down），把当前Tab页移到窗口右边（下边），方便对比</li><li>文件中右键&gt;Local History能够查看文件修改前后的对比</li><li>IDE右下角能看到一些有用的信息，光标当前在第几行的第几个字符、当前回车换行、当前编码类型、当前Git分支</li><li>IDE右侧边栏&gt;Database</li></ol><h2 id="如何去掉烦人的波浪线？PEP8又是什么？"><a href="#如何去掉烦人的波浪线？PEP8又是什么？" class="headerlink" title="如何去掉烦人的波浪线？PEP8又是什么？"></a>如何去掉烦人的波浪线？PEP8又是什么？</h2><ol><li>单独一行的注释：#+1空格+注释内容</li><li>代码后跟着的注释：2空格+#+1空格+注释内容</li><li>牢记快捷键 <code>ctrl+alt+L</code></li></ol><h2 id="SSH-Terminal：-Default-encoding-UTF-8"><a href="#SSH-Terminal：-Default-encoding-UTF-8" class="headerlink" title="SSH Terminal： Default encoding:UTF-8"></a>SSH Terminal： Default encoding:UTF-8</h2><ol><li>Settings&gt;Tools&gt;SSH Terminal&gt;最后一行Default encoding:选择UTF-8</li></ol><h2 id="善用搜索！善用搜索！善用搜索！"><a href="#善用搜索！善用搜索！善用搜索！" class="headerlink" title="善用搜索！善用搜索！善用搜索！"></a>善用搜索！善用搜索！善用搜索！</h2><ol><li>遇到不懂问题，先自己搜索。这样才记得更牢！</li><li>推荐使用sogou英文搜索<a href="http://english.sogou.com/">http://english.sogou.com/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>pycharm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub够用教程</title>
    <link href="/2022/01/22/%E7%AC%94%E8%AE%B0/GitHub%E5%A4%9F%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/01/22/%E7%AC%94%E8%AE%B0/GitHub%E5%A4%9F%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Github够用教程"><a href="#Github够用教程" class="headerlink" title="Github够用教程"></a>Github够用教程</h1><h2 id="git和Github是什么"><a href="#git和Github是什么" class="headerlink" title="git和Github是什么"></a>git和Github是什么</h2><p>git是一个运行在你电脑上的版本控制软件，Github是基于git打造的网站</p><p>git的三个概念：commit 提交/ repository 仓库/ branch 分支</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>git  <a href="https://gitforwindows.org/">https://gitforwindows.org/</a></li><li>vscode  <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li></ul><h2 id="看别人的项目"><a href="#看别人的项目" class="headerlink" title="看别人的项目"></a>看别人的项目</h2><p>GoGoCode 项目地址：<a href="https://github.com/thx/gogocode">https://github.com/thx/gogocode</a></p><p>git clone <a href="https://github.com/thx/gogocode.git">https://github.com/thx/gogocode.git</a></p><h3 id="关注几个地方"><a href="#关注几个地方" class="headerlink" title="关注几个地方"></a>关注几个地方</h3><p>Star</p><p>README.md</p><p>issue</p><p>LICENSE</p><h2 id="提升github速度的方法"><a href="#提升github速度的方法" class="headerlink" title="提升github速度的方法"></a>提升github速度的方法</h2><ol><li>利用镜像提高clone速度，在github.com后面添加 <strong>.cnpmjs.org</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org/thx/gogocode.git<br></code></pre></td></tr></table></figure><ol start="2"><li>使用码云作为中转站</li><li>比较适合下载单一的文件，如单独下载readme文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">如下载文件：https://github.com/thx/gogocode/blob/main/README.md<br><br>修改网址为：https://cdn.jsdelivr.net/gh/thx/gogocode@main/README.md<br></code></pre></td></tr></table></figure><p>就可以直接打开，ctrl+s保存</p><h2 id="找开源项目的一些途径"><a href="#找开源项目的一些途径" class="headerlink" title="找开源项目的一些途径"></a>找开源项目的一些途径</h2><p>• <a href="https://github.com/trending/">https://github.com/trending/</a></p><p>  在这里你可以看到各种不同开发语言的每天/周/月的最热门的 Repositories 和 Developers</p><p>• https:///github.com/521xueweihan/HelloGitHub</p><p>  有趣、入门级的开源项目、开源书籍、实战项目、企业级项目等</p><p>• <a href="https://github.com/ruanyf/weekly">https://github.com/ruanyf/weekly</a></p><p>  记录每周值得分享的科技内容，周五发布</p><p>• <a href="https://www.zhihu.com/column/mm-fe">https://www.zhihu.com/column/mm-fe</a></p><p>  阿里妈妈前端快爆前端新鲜事</p><h2 id="特殊的查找资源小技巧-常用前缀后缀"><a href="#特殊的查找资源小技巧-常用前缀后缀" class="headerlink" title="特殊的查找资源小技巧-常用前缀后缀"></a>特殊的查找资源小技巧-常用前缀后缀</h2><p>• 找百科大全 awesome xxx<br>• 找例子 xxx sample<br>• 找空项目架子 xxx starter / xxx boilerplate<br>• 找教程 xxx tutorial</p><p><img src="https://s2.loli.net/2022/01/22/AcknhXTLDj76alK.png" alt="image-20220122172410705"></p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo建站</title>
    <link href="/2022/01/20/%E7%AC%94%E8%AE%B0/hexo%E5%BB%BA%E7%AB%99/"/>
    <url>/2022/01/20/%E7%AC%94%E8%AE%B0/hexo%E5%BB%BA%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo建站记录"><a href="#hexo建站记录" class="headerlink" title="hexo建站记录"></a>hexo建站记录</h1><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p><p>记得看下评论，搭建过程遇到问题通过百度解决</p><p><a href="https://tding.top/archives/aad98408.html#more">Hexo 搭建个人博客文章汇总 | 小丁的个人博客 (tding.top)</a></p><span id="more"></span><h2 id="最新主题Fluid"><a href="#最新主题Fluid" class="headerlink" title="最新主题Fluid"></a>最新主题Fluid</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)</a></p><p>用户文档： <a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid (fluid-dev.com)</a></p><p>hexo访问优化：<a href="https://www.julydate.com/post/60859300/">你不爱我了QAQ (julydate.com)</a></p><h2 id="每次使用"><a href="#每次使用" class="headerlink" title="每次使用"></a>每次使用</h2><ul><li>打开博客目录blog文件夹</li><li>shift+右键 在此处打开Powershell窗口</li><li>输入命令 hexo new 文章名称 新建一篇博客</li><li>在source &gt; _posts 文件夹下，打开刚创建的文章</li><li>记录标签tags和分类categories</li><li><!-- more -->之前是文章概况，或文章的前几行</li><li>输入命令 hexo g -d  部署</li></ul><h2 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h2><p><a href="https://mayuke.xyz/">我的博客 (mayuke.xyz)</a></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p><a href="https://tding.top/archives/b48e2719.html">GitHub Pages 绑定域名 | 小丁的个人博客 (tding.top)</a></p><h2 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h2><p><a href="https://www.namesilo.com/">https://www.namesilo.com/</a></p><p><a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程（附 Namesilo 优惠码） - 知乎 (zhihu.com)</a></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p> <a href="https://console.dnspod.cn/">管理控制台 - DNSPod</a></p><h2 id="GitHub项目"><a href="#GitHub项目" class="headerlink" title="GitHub项目"></a>GitHub项目</h2><p><a href="https://github.com/MayukeM/MayukeM.github.io">MayukeM/MayukeM.github.io: It is my personal website.</a></p><p><a href="https://zhuanlan.zhihu.com/p/143581449">一个极简、优美的Hexo主题：Coder - 知乎 (zhihu.com)</a></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-string">&#x27;https://github.com/MayukeM/MayukeM.github.io.git/&#x27;</span>: OpenSSL SSL_read: <span class="hljs-keyword">Connection</span> was <span class="hljs-keyword">reset</span>, errno <span class="hljs-number">10054</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.sslVerify <span class="hljs-string">&quot;false&quot;</span><br>git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><p><a href="https://github.com/ineo6/hosts">ineo6/hosts: GitHub最新hosts。解决GitHub图片无法显示，加速GitHub网页浏览。</a></p><p><a href="https://blog.csdn.net/li_magic/article/details/83140986">(55条消息) windows 下安装GIT 屏蔽ssl证书校验_li_magic的博客-CSDN博客_git关闭ssl证书验证</a></p><p><img src="https://s2.loli.net/2022/01/20/HWV3TYSkjI2MOEe.png" alt="1"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/19/%E7%AC%94%E8%AE%B0/hello-world/"/>
    <url>/2022/01/19/%E7%AC%94%E8%AE%B0/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows常用快捷键</title>
    <link href="/2021/01/15/%E7%AC%94%E8%AE%B0/windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/01/15/%E7%AC%94%E8%AE%B0/windows%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h1><p><a href="https://www.cnblogs.com/sao-di-seng/p/5632209.html">https://www.cnblogs.com/sao-di-seng/p/5632209.html</a><br>Vim编辑器<br><a href="http://blog.sina.com.cn/s/blog_46dac66f010005kw.html">http://blog.sina.com.cn/s/blog_46dac66f010005kw.html</a>  </p><p>快捷键Ctrl + Shift + Q，然后回车，直接电脑滑动关机<br>进入微信目录，地址栏输入cmd弹出黑框start WeChat.exe &amp; WeChat.exe 多开微信</p><span id="more"></span><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">Alt+Tab</td><td align="center">窗口切换</td></tr><tr><td align="center">F4</td><td align="center">关闭窗口，关机</td></tr><tr><td align="center">Ctrl+Alt+方向键</td><td align="center">窗口转向</td></tr><tr><td align="center">Alt+空格 C</td><td align="center">关闭窗口</td></tr><tr><td align="center">Alt+回车</td><td align="center">查看文件属性</td></tr><tr><td align="center">Ctrl+Shift+拖动</td><td align="center">创建快捷键</td></tr><tr><td align="center">Win+L</td><td align="center">锁屏（Lock）</td></tr><tr><td align="center">Win+D</td><td align="center">桌面（Desktop）</td></tr><tr><td align="center">Win+E</td><td align="center">资源管理器（Explorer）</td></tr><tr><td align="center">Win+S</td><td align="center">搜索</td></tr><tr><td align="center">Win+M</td><td align="center">最小化所有窗口</td></tr><tr><td align="center">Win+N</td><td align="center">快速笔记（OneNote）</td></tr><tr><td align="center">Win+W</td><td align="center">便笺 草图板 屏幕草图</td></tr><tr><td align="center">Win+T</td><td align="center">切换任务栏应用</td></tr><tr><td align="center">Win+U</td><td align="center">显示设置</td></tr><tr><td align="center">Win+I</td><td align="center">windows设置</td></tr><tr><td align="center">Win+R</td><td align="center">启动运行</td></tr><tr><td align="center">Win+方向键</td><td align="center">控制窗体大小</td></tr><tr><td align="center">win+tab 左上角新建桌面</td><td align="center">新建桌面</td></tr><tr><td align="center">ctrl + win + 方向键</td><td align="center">切换桌面</td></tr></tbody></table><h2 id="闪电启动软件的秘密"><a href="#闪电启动软件的秘密" class="headerlink" title="闪电启动软件的秘密"></a>闪电启动软件的秘密</h2><ol><li><p>在D盘建立一个文件夹，命名为QuickStart或者你喜欢的名字。</p></li><li><p>把桌面的软件快捷方式图标放到QuickStart文件夹中，并重命名成自己能记住的缩写，不重复即可。比如：</p></li></ol><table><thead><tr><th>软件名称</th><th>缩写</th></tr></thead><tbody><tr><td>腾讯QQ</td><td>qq</td></tr><tr><td>Mozilla FireFox</td><td>ff</td></tr><tr><td>Visual Studio</td><td>vs</td></tr><tr><td>SQL Server</td><td>sql</td></tr></tbody></table><ol start="3"><li><p>给QuickStart文件夹建立一个快捷方式，然后重命名为qs，并且把这个快捷方式也放到QuickStart文件夹中</p></li><li><p>在桌面对“我的电脑”点右键，然后选择属性，弹出系统属性对话框。点击左边的“高级系统设置”，在系统属性对话框中，点击“环境变量”按钮，在系统变量列表中找到Path项，然后点击“编辑”按钮，在编辑对话框中新增输入路径“D:\QuickStart”，然后一路点击“确定”按钮，关闭所有对话框。</p></li><li><p>按下Win+R键，调用运行对话框。在运行对话框中输入qq，如果你的电脑够快的话，马上就会弹出QQ的登录界面。输入qs，就会打开D:\QuickStart文件夹。</p></li><li><p>当你新安装了软件，需要把快捷方式添加进来，用qs命令就可以很快打开QuickStart文件夹。</p></li><li><p>当你有经常用到的文件夹，也可以把它的快捷方式放到QuickStart中，很方便就可以打开。</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">Win+R运行输入<br><br>-自定义<br><span class="hljs-code">qs快速打开软件快捷方式文件夹</span><br><span class="hljs-code">rs最近文件</span><br><span class="hljs-code">    ff火狐浏览器</span><br><span class="hljs-code">    timTim</span><br><span class="hljs-code">    txsp腾讯视频</span><br><span class="hljs-code">    dngj电脑管家</span><br><span class="hljs-code">    bdwp百度网盘</span><br><span class="hljs-code">    pan百度网盘破解版</span><br><span class="hljs-code">    psPS</span><br><span class="hljs-code">    </span><br><span class="hljs-code">-常用运行命令</span><br><span class="hljs-code">    winwordWord </span><br><span class="hljs-code">    excelExcel</span><br><span class="hljs-code">    onenoteOneNote</span><br><span class="hljs-code"></span><br><span class="hljs-code">    notepad 记事本  </span><br><span class="hljs-code">    mspaint 绘图板 </span><br><span class="hljs-code">    write    写字板</span><br><span class="hljs-code"></span><br><span class="hljs-code">    regedit 注册表</span><br><span class="hljs-code">    mstsc    远程桌面</span><br><span class="hljs-code"></span><br><span class="hljs-code">    cmd命令行 之后输入</span><br><span class="hljs-code">    shutdown -s -t 00 立即关机</span><br></code></pre></td></tr></table></figure><p>下面是用Au3实现的用Alt+Q调用“运行”的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">HotKeySet(<span class="hljs-string">&quot;!q&quot;</span>,<span class="hljs-string">&quot;WinRun&quot;</span>)<br>Func WinRun()<br>Send(<span class="hljs-string">&quot;&#123;LWINDOWN&#125;r&#123;LWINUP&#125;&quot;</span>)<br>WinWait(<span class="hljs-string">&quot;Run&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>If Not WinActive(<span class="hljs-string">&quot;Run&quot;</span>,<span class="hljs-string">&quot;&quot;</span>) Then WinActivate(<span class="hljs-string">&quot;Run&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>EndFunc<br>Do<br>Sleep(500)<br>Until False<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
      <tag>windows</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/01/07/%E7%AC%94%E8%AE%B0/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/07/%E7%AC%94%E8%AE%B0/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Typora-Markdown语法"><a href="#Typora-Markdown语法" class="headerlink" title="Typora-Markdown语法"></a>Typora-Markdown语法</h1><h2 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h2><p>输入<code>[toc]</code>然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><p>[toc]</p><span id="more"></span><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题：#+空格+标题+回车 或者ctrl+1</span><br><br><span class="hljs-section">## 二级标题：##+空格+标题+回车 或者Ctrl+2</span><br><br><span class="hljs-section">### 三级标题：###+空格+标题+回车 或者ctrl+3</span><br><br><span class="hljs-section">#### 四级标题：####+空格+标题+回车 或者ctrl+4</span><br><br><span class="hljs-section">##### 五级标题：#####+空格+标题+回车 或者ctrl+5</span><br><br><span class="hljs-section">###### 六级标题：######+空格+标题+回车 或者ctrl+6</span><br></code></pre></td></tr></table></figure><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**加粗**</span> ctrl+B<br><span class="hljs-emphasis">*斜体*</span> ctrl+I<br><span class="hljs-strong">**<span class="hljs-emphasis">*粗体+斜体<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span> crtl+U</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">~~删除线~~ alt+shift+5</span></span></span></span><br></code></pre></td></tr></table></figure><h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 在起始位置添加一个大于&gt;符号+空格，表示引用</span><br></code></pre></td></tr></table></figure><blockquote><p>引用别人文章字句时可以使用</p></blockquote><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><p>可以用<code>---</code>空格加回车</p><hr><p>也可以<code>***</code>空格加回车（这个分割线占全屏）</p><hr><h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">格式：![<span class="hljs-string">图片名字</span>](<span class="hljs-link">输入图片路径</span>)<br></code></pre></td></tr></table></figure><p><img src="C:/Users/13740/Pictures/Camera Roll/MRV_20201229_13_25_17.jpg" alt="小猫" style="zoom:25%;" />\</p><blockquote><p>图片前敲一个空格，就能自动左对齐</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/137310314?utm_source=qq&utm_medium=social&utm_oi=1262490802221498368">图床功能</a></p><p><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin">图床是什么？</a></p><p><strong>在偏好设置，把图片保存到相对路径的方法</strong></p><p><img src="https://i.loli.net/2021/02/07/QhZ9Bs4NK2gCYAX.png" alt="image-20210131213522562"></p><h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h2><p><strong>行内式：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">格式：[<span class="hljs-string">超链接名字</span>](<span class="hljs-link">超链接地址</span>)<br></code></pre></td></tr></table></figure><blockquote><p>按住ctrl点击访问</p></blockquote><p><a href="https://www.baidu.com/">点击跳转</a></p><p><strong>参考式</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">格式：[链接一]：http://www.baidu.com<br>[<span class="hljs-string">百度1</span>][<span class="hljs-symbol">链接一</span>]<br>[<span class="hljs-string">百度2</span>][<span class="hljs-symbol">链接一</span>]<br></code></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度1</a></p><p><a href="https://www.baidu.com/">百度2</a></p><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><p><strong>有序列表</strong>： 1+.+空格</p><ol><li>第一</li><li>第二<ol><li>第二点一</li><li>第二点二</li></ol></li></ol><p><strong>无序列表</strong>：-号＋空格</p><ul><li>A</li><li>B</li><li>C</li></ul><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><ol><li>可直接右键插入表格 ctrl+T</li><li>手打样式 |名字|性别|生日|</li></ol><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9.代码"></a>9.代码</h2><p>三个```后面加语言类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">```html 回车<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>嵌入代码</strong></p><p>使用``</p><h2 id="10-插入表情"><a href="#10-插入表情" class="headerlink" title="10.插入表情"></a>10.插入表情</h2><p>使用<code>:happy:</code>输入高兴的表情，使用<code>:cry:</code>输入哭的表情，等等</p><p>:happy::sweat::cry:</p><h2 id="11-标注"><a href="#11-标注" class="headerlink" title="11.标注"></a>11.标注</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">某些人用过了才知道[^注释]<br>[<span class="hljs-symbol">^注释</span>]:<span class="hljs-link">Somebody that I used to know.</span><br></code></pre></td></tr></table></figure><p>某些人用过了才知道[^注释]</p><p>[^注释]:Somebody that I used to know.</p><blockquote><p>把鼠标放在<code>注释</code>上，将会有提示内容.</p></blockquote><h2 id="12-任务列表"><a href="#12-任务列表" class="headerlink" title="12.任务列表"></a>12.任务列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [ ] 吃饭<br><span class="hljs-bullet">-</span> [ ] 逛街<br><span class="hljs-bullet">-</span> [ ] 看电影<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 吃饭 </li><li><input disabled="" type="checkbox"> 逛街</li><li><input checked="" disabled="" type="checkbox"> 看电影</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
